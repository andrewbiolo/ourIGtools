/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package igtools.gui2.codistances;

import igtools.common.nucleotide.B3Nucleotide;
import igtools.common.sequence.B3LLSequence;
import igtools.common.sequence.B3Sequence;
import igtools.common.util.Timer;
import igtools.dictionaries.elsa.IELSAIterator;
import igtools.dictionaries.elsa.NELSA;
import igtools.gui2.WSSequence;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.io.File;
import java.text.DecimalFormat;
import java.util.Map;
import java.util.TreeMap;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.entity.XYItemEntity;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYBarPainter;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author vbonnici
 */
public class DistalRecurrencesFrame extends javax.swing.JFrame {
   
    private WSSequence wsseq;
    private NELSA nelsa = null;
    
    
    private IELSAIterator it_1 = null;
    private IELSAIterator it_2 = null;
   
    private int picked_dist = -1;
    private int picked_count = -1;
    
    private DecimalFormat df = new DecimalFormat("###,###,###,###");
    
    private ChartPanel chartPanel = null;
    

    public DistalRecurrencesFrame(WSSequence wsseq) {
       this.wsseq = wsseq;
       this.nelsa = wsseq.getNELSA();
        
       initComponents();
       this.setTitle("Multiplicities: " + wsseq.getName());        
        
       totalCountLabel.setText(" ");
       pickedPairLabel.setText(" ");
        
        
       checkButtons();
    }
    
    
    public DistalRecurrencesFrame(WSSequence wsseq, IELSAIterator it_1, IELSAIterator it_2) {
        this(wsseq);
        this.it_1 = it_1;
        this.it_2 = it_2;
        makeChart();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        field_k_1 = new javax.swing.JTextField();
        field_k_2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        maxDistField = new javax.swing.JTextField();
        field_cword_1 = new javax.swing.JTextField();
        field_cword_2 = new javax.swing.JTextField();
        button_prev_1 = new javax.swing.JButton();
        button_lock_1 = new javax.swing.JToggleButton();
        button_next_1 = new javax.swing.JButton();
        button_prev_2 = new javax.swing.JButton();
        button_lock_2 = new javax.swing.JToggleButton();
        button_next_2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        logxButton = new javax.swing.JToggleButton();
        logyButton = new javax.swing.JToggleButton();
        go1Button = new javax.swing.JButton();
        go2Button = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        allowGapsCheck = new javax.swing.JCheckBox();
        overlappingCheck = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        pickedPairLabel = new javax.swing.JLabel();
        totalCountLabel = new javax.swing.JLabel();
        view_words_button = new javax.swing.JButton();
        viewPosButton = new javax.swing.JButton();
        center_panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 400));

        jSplitPane1.setDividerLocation(200);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(200, 22));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 100));

        jPanel2.setMinimumSize(new java.awt.Dimension(180, 0));
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 500));

        jLabel1.setText("k");

        field_k_1.setColumns(4);
        field_k_1.setText("3");

        field_k_2.setColumns(4);
        field_k_2.setText("3");
        field_k_2.setEnabled(false);

        jLabel7.setText("k");

        jLabel5.setText("max distance");

        maxDistField.setText("2000");
        maxDistField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxDistFieldActionPerformed(evt);
            }
        });

        button_prev_1.setText("prev");
        button_prev_1.setEnabled(false);
        button_prev_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_prev_1ActionPerformed(evt);
            }
        });

        button_lock_1.setText("lock");

        button_next_1.setText("next");
        button_next_1.setEnabled(false);
        button_next_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_next_1ActionPerformed(evt);
            }
        });

        button_prev_2.setText("prev");
        button_prev_2.setEnabled(false);
        button_prev_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_prev_2ActionPerformed(evt);
            }
        });

        button_lock_2.setText("lock");

        button_next_2.setText("next");
        button_next_2.setEnabled(false);
        button_next_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_next_2ActionPerformed(evt);
            }
        });

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("clone");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        logxButton.setText("log X");
        logxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logxButtonActionPerformed(evt);
            }
        });

        logyButton.setText("log Y");
        logyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logyButtonActionPerformed(evt);
            }
        });

        go1Button.setText("go");
        go1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                go1ButtonActionPerformed(evt);
            }
        });

        go2Button.setText("go");
        go2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                go2ButtonActionPerformed(evt);
            }
        });

        allowGapsCheck.setSelected(true);
        allowGapsCheck.setText("Allow gaps");

        overlappingCheck.setSelected(true);
        overlappingCheck.setText("Overlapping");
        overlappingCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overlappingCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(field_k_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxDistField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(field_k_1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(go1Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(field_cword_1))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(go2Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(field_cword_2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4))
                    .addComponent(jSeparator4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(button_prev_1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button_lock_1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button_next_1))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(button_prev_2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button_lock_2)
                                .addGap(8, 8, 8)
                                .addComponent(button_next_2))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(logxButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(logyButton))
                            .addComponent(allowGapsCheck)
                            .addComponent(overlappingCheck))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(field_k_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(field_cword_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(go1Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_next_1)
                    .addComponent(button_prev_1)
                    .addComponent(button_lock_1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(field_k_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(field_cword_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(go2Button))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_next_2)
                    .addComponent(button_prev_2)
                    .addComponent(button_lock_2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(maxDistField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(logxButton)
                    .addComponent(logyButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(allowGapsCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(overlappingCheck)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel2);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setMinimumSize(new java.awt.Dimension(0, 30));

        pickedPairLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pickedPairLabel.setText("jLabel6");

        totalCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalCountLabel.setText("jLabel7");

        view_words_button.setText("view");
        view_words_button.setEnabled(false);
        view_words_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                view_words_buttonActionPerformed(evt);
            }
        });

        viewPosButton.setText("view pos");
        viewPosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPosButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(totalCountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 335, Short.MAX_VALUE)
                .addComponent(pickedPairLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(view_words_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewPosButton)
                .addGap(8, 8, 8))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pickedPairLabel)
                    .addComponent(totalCountLabel)
                    .addComponent(view_words_button)
                    .addComponent(viewPosButton))
                .addGap(2, 2, 2))
        );

        jPanel3.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        center_panel.setBackground(java.awt.Color.white);
        center_panel.setLayout(new java.awt.BorderLayout());
        jPanel3.add(center_panel, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void maxDistFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxDistFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxDistFieldActionPerformed

    private void button_prev_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_prev_1ActionPerformed
        prev_1();
    }//GEN-LAST:event_button_prev_1ActionPerformed

    private void button_next_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_next_1ActionPerformed
        next_1();
    }//GEN-LAST:event_button_next_1ActionPerformed

    private void button_prev_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_prev_2ActionPerformed
        prev_2();
    }//GEN-LAST:event_button_prev_2ActionPerformed

    private void button_next_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_next_2ActionPerformed
        next_2();
    }//GEN-LAST:event_button_next_2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        makeChart();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DistalRecurrencesFrame frame = new DistalRecurrencesFrame(wsseq, it_1.clone(), it_2.clone());
                frame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                frame.setVisible(true);
            }
        });
    }//GEN-LAST:event_jButton4ActionPerformed

    private void view_words_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_view_words_buttonActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DistalWordListFrame(nelsa, it_1.clone(), it_2.clone(), picked_dist, getTitle()).setVisible(true);
            }
        });
    }//GEN-LAST:event_view_words_buttonActionPerformed

    private void logxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logxButtonActionPerformed
        checkLogXScale();
    }//GEN-LAST:event_logxButtonActionPerformed

    private void logyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logyButtonActionPerformed
        checkLogYScale();
    }//GEN-LAST:event_logyButtonActionPerformed

    private void go1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_go1ButtonActionPerformed
        try{
            
            this.setEnabled(false);
            IELSAIterator it = nelsa.find(new B3LLSequence(this.field_cword_1.getText().trim()));
            if(it != null){
                it_1 = it;
                this.field_k_1.setText("" + it_1.k());
                makeChart();
                invalidatePick();
                this.go1Button.setBackground(Color.gray);
            }
            else{
                 this.go1Button.setBackground(Color.red);
            }
            
        }catch(Exception e){
        }
        this.setEnabled(true);
    }//GEN-LAST:event_go1ButtonActionPerformed

    private void go2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_go2ButtonActionPerformed
        try{
            
            this.setEnabled(false);
            IELSAIterator it = nelsa.find(new B3LLSequence(this.field_cword_2.getText().trim()));
            if(it != null){
                it_2 = it;
                this.field_k_2.setText("" + it_2.k());
                makeChart();
                invalidatePick();
            }
            
        }catch(Exception e){}
        this.setEnabled(true);
    }//GEN-LAST:event_go2ButtonActionPerformed

    private void viewPosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPosButtonActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DistalPosWordListFrame(nelsa, it_1.clone(), it_2.clone(), picked_dist, picked_count, getTitle()).setVisible(true);
            }
        });
    }//GEN-LAST:event_viewPosButtonActionPerformed

    private void overlappingCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overlappingCheckActionPerformed

    }//GEN-LAST:event_overlappingCheckActionPerformed

    
    
    private void checkLogXScale(){
        if(this.chartPanel != null){
            if(this.logxButton.isSelected()){
                ((XYPlot)(this.chartPanel.getChart().getPlot())).setDomainAxis(new LogAxis("Distance"));
            }
            else{
               ((XYPlot)(this.chartPanel.getChart().getPlot())).setDomainAxis(new NumberAxis("Distance"));  
            }
        }
    }                                        

    private void checkLogYScale(){
        if(this.chartPanel != null){
            if(this.logyButton.isSelected()){
                ((XYPlot)(this.chartPanel.getChart().getPlot())).setRangeAxis(new LogAxis("Multiplicity"));
            }
            else{
               ((XYPlot)(this.chartPanel.getChart().getPlot())).setRangeAxis(new NumberAxis("Multiplicity"));  
            }
        }
    }
    
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allowGapsCheck;
    private javax.swing.JToggleButton button_lock_1;
    private javax.swing.JToggleButton button_lock_2;
    private javax.swing.JButton button_next_1;
    private javax.swing.JButton button_next_2;
    private javax.swing.JButton button_prev_1;
    private javax.swing.JButton button_prev_2;
    private javax.swing.JPanel center_panel;
    private javax.swing.JTextField field_cword_1;
    private javax.swing.JTextField field_cword_2;
    private javax.swing.JTextField field_k_1;
    private javax.swing.JTextField field_k_2;
    private javax.swing.JButton go1Button;
    private javax.swing.JButton go2Button;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToggleButton logxButton;
    private javax.swing.JToggleButton logyButton;
    private javax.swing.JTextField maxDistField;
    private javax.swing.JCheckBox overlappingCheck;
    private javax.swing.JLabel pickedPairLabel;
    private javax.swing.JLabel totalCountLabel;
    private javax.swing.JButton viewPosButton;
    private javax.swing.JButton view_words_button;
    // End of variables declaration//GEN-END:variables

    
    private void checkButtons(){
        //button_go_1.setEnabled(false);
        if(it_1 == null){
            button_lock_1.setEnabled(false);
            button_next_1.setEnabled(false);
            button_prev_1.setEnabled(false);
            
            field_cword_1.setText("");
        }
        else{
            button_next_1.setEnabled(it_1.hasNext());
            button_prev_1.setEnabled(it_1.hasPrev());
            
            field_cword_1.setText(B3Nucleotide.toString(it_1.kmer()));
        }
        
        
        //button_go_2.setEnabled(false);;
        if(it_2 == null){
            button_lock_2.setEnabled(false);
            button_next_2.setEnabled(false);
            button_prev_2.setEnabled(false);
            
            field_cword_2.setText("");
        }
        else{
            button_next_2.setEnabled(it_2.hasNext());
            button_prev_2.setEnabled(it_2.hasPrev());
            
            field_cword_2.setText(B3Nucleotide.toString(it_2.kmer()));
        }
    }
    
    private void invalidatePick(){
            picked_dist = -1;
            picked_count = -1;
            pickedPairLabel.setText("");
            view_words_button.setEnabled(false);
            viewPosButton.setEnabled(false);
   }
    
    private void start(){
        if(nelsa != null){
           try{
                it_1 = nelsa.begin( Integer.parseInt(field_k_1.getText()) );
                next_1();
            }catch(Exception e){
                e.printStackTrace();
                it_1 = null;
                it_2 = null;
            }
        }
        invalidatePick();
    }
    
    private void next_1(){
        if(it_1 != null && it_1.hasNext()){
            it_1.next();
            it_2 = it_1.clone();
        }
        makeChart();
        invalidatePick();
    }
    
    private void next_2(){
        if(it_2 != null){
            if(it_2.hasNext()){
                it_2.next();
                //makeChart();
            }
            else if(it_1.hasNext()){
                it_1.next();
                if(!button_lock_2.isSelected())
                    it_2 = it_1.clone();
                //makeChart();
            }
        }
        makeChart();
        invalidatePick();
    }
    
    
    private void prev_1(){
       if(it_1!=null && it_1.hasPrev()) {
           it_1.prev();
           if(!button_lock_2.isSelected())
                it_2 = it_1.clone();
       }
       makeChart();
       invalidatePick();
    }
    
    
    private void prev_2(){
        if(it_2 != null){
            if(it_2.hasPrev()){
                it_2.prev();
            }
            else if(it_1.hasPrev()){
                it_1.prev();
                it_2 = it_1.clone();
            }
        }
        makeChart();
        invalidatePick();
    }
    
    
    
    private void makeChart(){
        center_panel.removeAll();
        center_panel.setBackground(Color.RED);
        center_panel.invalidate();
        center_panel.repaint();
        
        boolean  allowGaps = this.allowGapsCheck.isSelected();
        boolean overlapping = this.overlappingCheck.isSelected();
        
        
        /*
        Map<Integer,Integer> comults = new TreeMap<>();
        int[] max = new int[3];
        
        if(it_1.compare(it_2) == 0){
            System.out.println(B3Nucleotide.toString(it_1.kmer()));
            
            
            int[] poss = it_1.sortedPositions();
            int dist;
            Integer m_dist;
            
            int[] ns = null;
            if(!allowGaps)
                ns = nelsa.sortedNsByPositions(it_1);

            for(int i=1; i<poss.length; i++){
                dist = (poss[i] - poss[i-1]);

                
                if(allowGaps || ns[i-1] >= dist){
                    m_dist = comults.get(dist);      
                    if(m_dist == null){
                            comults.put(dist, 1);
                    }
                    else{
                            comults.put(dist, m_dist + 1);
                    }
                }
            }
        }
        else{
            System.out.println(B3Nucleotide.toString(it_1.kmer()));
            System.out.println(B3Nucleotide.toString(it_2.kmer()));
        
            int[][] poss = new int[2][];
            poss[0] = it_1.sortedPositions();
            poss[1] = it_2.sortedPositions();

            int[] poss_i = new int[2];

            int a_i = poss[0][0] <= poss[1][0] ? 0 : 1;
            int a_j = poss[1][0] < poss[0][0] ? 0 : 1;

            int dist;
            Integer m_dist;
            
            int[][] ns = new int[2][];
            if(!allowGaps){
                ns[0] = nelsa.sortedNsByPositions(it_1);
                ns[1] = nelsa.sortedNsByPositions(it_2);
            }
            boolean take = true;
            

            while(poss_i[0] < poss[0].length && poss_i[1] < poss[1].length){

                //System.out.println("(a_i,a_j) = ("+a_i+","+a_j+")");


                while(poss_i[a_i] < poss[a_i].length &&  
                        poss[a_i][poss_i[a_i]] <= poss[a_j][poss_i[a_j]]
                        ){
                    poss_i[a_i]++;
                }

                //System.out.println("("+  a_i +","+poss_i[0]+","+poss_i[1]+")");
    //                    + "("+poss[0][poss_i[0]]+","+poss[1][poss_i[1]]+")");

//                System.out.println("["+poss[a_j][poss_i[a_j]]+","+poss[a_i][poss_i[a_i] - 1]+"]");

                //if(diff!=0) add  poss[a_j][poss_i[a_j]]  -   poss[a_i][poss_i[a_i] - 1]
                
                if(max[0] < (poss[a_j][poss_i[a_j]]) - (poss[a_i][poss_i[a_i] - 1])){
                    max[0] = (poss[a_j][poss_i[a_j]]) - (poss[a_i][poss_i[a_i] - 1]);
                    max[1] = (poss[a_j][poss_i[a_j]]);
                    max[2] = (poss[a_i][poss_i[a_i] - 1]);
                }

                dist = (poss[a_j][poss_i[a_j]]) - (poss[a_i][poss_i[a_i] - 1]);
                
                if(allowGaps ||  ns[a_i][poss_i[a_i] - 1] > dist){
                    m_dist = comults.get(dist);
                    if(m_dist == null){
                            comults.put(dist, 1);
                    }
                    else{
                            comults.put(dist, m_dist + 1);
                    }

                }


                a_i = a_i == 0 ? 1 : 0;
                a_j = a_j == 0 ? 1 : 0;

                if(poss_i[0] >= poss[0].length || poss_i[1] >= poss[1].length){
                    break;
                }
            }
        }
        
        System.out.println("MAX["+max[0]+","+max[1]+","+max[2]+"]");
        
        checkButtons();
    
        int maxDist = Integer.MAX_VALUE;
        try{
            if(maxDistField.getText().trim().length() == 0)
                maxDist = Integer.MAX_VALUE;
            else
                maxDist = Integer.parseInt(maxDistField.getText());
           
        }catch(Exception e){
            maxDist = Integer.MAX_VALUE;
        };
        
        final XYSeries series = new XYSeries("");
        int totalCount = 0;
        
        int lastKey = 0; int lastValue = 0;
        
        for(Map.Entry<Integer, Integer> entry : comults.entrySet()){
            
            series.add(entry.getKey(), entry.getValue());
            
            lastKey = entry.getKey();
            lastValue = entry.getValue();
            
            totalCount += entry.getValue();
            
//            if(entry.getKey() < 50){
//                System.out.println(entry.getKey() + "\t" + entry.getValue());
//            }
            
            if(entry.getKey() >maxDist){
                break;
            }
        }
        
        
        //System.out.println("LAST["+lastKey+","+lastValue+"]");
        */
        
        
        int maxDist = Integer.MAX_VALUE;
        try{
            if(maxDistField.getText().trim().length() == 0)
                maxDist = Integer.MAX_VALUE;
            else
                maxDist = Integer.parseInt(maxDistField.getText());
           
        }catch(Exception e){
            maxDist = Integer.MAX_VALUE;
        };
        
        System.out.println(B3Nucleotide.toString(it_1.kmer()));
       
        checkButtons();
        
        
        int[] dists = null;
        
        if(it_1.compare(it_2) == 0){
            if(!overlapping){
                dists = igtools.analyses.toRemove.DistalRecurrence.proper_codistances(it_1);
            }
            else{
                dists = igtools.analyses.toRemove.DistalRecurrence.proper_overlapping_codistances(it_1);
                System.out.println(dists);
            }
        }
        else{
            if(!overlapping){
                dists = igtools.analyses.toRemove.DistalRecurrence.codistances(it_1, it_2);
            }
            else{
                dists = igtools.analyses.toRemove.DistalRecurrence.overlapping_codistances(it_1, it_2);
            }
        }
        
        
        final XYSeries series = new XYSeries("");
        if(dists != null){
            if(dists.length > 0){
                int[][] codists = igtools.analyses.toRemove.DistalRecurrence.co_recurrences_array(dists, false);
                for(int i=0; i<codists[0].length; i++){
                    if(codists[0][i] > maxDist)
                        break;
                    series.add(codists[0][i], codists[1][i]);
                }
            }
        }
        
        
        
        final XYSeriesCollection dataset = new XYSeriesCollection(series);
       
        
        final JFreeChart chart = ChartFactory.createXYBarChart(
                                        null, 
                                        "Distance", 
                                        false, 
                                        "Multiplicity", 
                                        dataset, 
                                        PlotOrientation.VERTICAL, 
                                        false, 
                                        true, 
                                        false);
        
        final ChartPanel chartPanel = new ChartPanel(chart){

            @Override
            public Dimension getPreferredSize() {
                return center_panel.getSize();
            }
        };
        
        chartPanel.setMinimumDrawWidth( 0 );
        chartPanel.setMinimumDrawHeight( 0 );
        chartPanel.setMaximumDrawWidth( 1920 );
        chartPanel.setMaximumDrawHeight( 1200 );
        
        
        //chartPanel.setPreferredSize(center_panel.getPreferredSize());
        chart.setBackgroundPaint(Color.white);
        //chartPanel.setMouseZoomable(false);
        chartPanel.setMouseWheelEnabled(true);
        
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        ((XYBarRenderer) plot.getRenderer()).setBarPainter(new StandardXYBarPainter());
        plot.getRenderer().setSeriesPaint( 0, Color.BLUE);
        plot.setDomainPannable(true);
        plot.setRangePannable(true);
                
        
        chartPanel.addChartMouseListener(new ChartMouseListener() {
            
            @Override
            public void chartMouseClicked(ChartMouseEvent cme) {
                
                Plot p = cme.getChart().getPlot();
                if(p instanceof XYPlot){                    
                    if(cme.getEntity() instanceof XYItemEntity){                        
                        int seriesIndex = ((XYItemEntity)cme.getEntity()).getSeriesIndex();
                        int item = ((XYItemEntity)cme.getEntity()).getItem();
                        XYSeries series = ((XYSeriesCollection)dataset).getSeries(seriesIndex);
                        XYDataItem xyItem = series.getDataItem(item);
                        System.out.println(xyItem);
                        System.out.println(seriesIndex + "\t" + item);
                        
                        
                        picked_dist = xyItem.getX().intValue();
                        picked_count = xyItem.getY().intValue();
                        
                        pickedPairLabel.setText("("+df.format(picked_dist)+" ; "+df.format(picked_count)+")");
                        view_words_button.setEnabled(true);
                        viewPosButton.setEnabled(true);
                        
                        return;
                    }
                }
                
                picked_dist = -1;
                picked_count = -1;
                pickedPairLabel.setText("");
                view_words_button.setEnabled(false);
                viewPosButton.setEnabled(false);
            }

            @Override
            public void chartMouseMoved(ChartMouseEvent cme) {
            }
            
        });
        
        
        //totalCountLabel.setText(" " + df.format(totalCount));
        
        this.chartPanel = chartPanel;
        checkLogXScale();
        checkLogYScale();
        
        center_panel.setBackground(Color.WHITE);
        center_panel.add(chartPanel, BorderLayout.CENTER);
        center_panel.revalidate();
        center_panel.repaint();
    }
    
    
    
}
