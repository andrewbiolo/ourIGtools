/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package igtools.gui2.codistances.distributions;

import igtools.analyses.toRemove.Distribution;
import igtools.analyses.toRemove.ExtractByDistrComp;
import igtools.common.nucleotide.B3Nucleotide;
import igtools.common.sequence.B3LLSequence;
import igtools.dictionaries.elsa.IELSAIterator;
import igtools.dictionaries.elsa.NELSA;
import igtools.gui2.WSSequence;
import igtools.gui2.positions.PositionsPanel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.text.DecimalFormat;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYBarPainter;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author vbonnici
 */
public class DistalDistributionsFrame extends javax.swing.JFrame {

     private final DecimalFormat df = new DecimalFormat("###,###,###,###");
    
    private WSSequence wsseq;
    private NELSA nelsa;
    
    ExtractByDistrComp distrExtractor = null;
    
    private final int nofChartRows = 4;
    private final int nofChartCols = 1;
    
    private IELSAIterator wordIt = null;
    
    /**
     * Creates new form DistalDistributionsFrame
     */
    public DistalDistributionsFrame(WSSequence wsseq) {
        this.wsseq = wsseq;
        this.nelsa = wsseq.getNELSA();
        
        distrExtractor = new ExtractByDistrComp(this.wsseq.getB3seq(), this.nelsa);
        //distrExtractor.generateRandomSequence();
        
        initComponents();
        this.setTitle("General trends: "+wsseq.getName());
        
        
        //this.chartsPanel.setLayout(new GridLayout(nofChartRows, nofChartCols));
        this.chartsPanel.setLayout(new BoxLayout(this.chartsPanel, BoxLayout.Y_AXIS));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        kTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        itTextField = new javax.swing.JTextField();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        normalizeByKCheckBox = new javax.swing.JCheckBox();
        normalizeByMaxCheckBox = new javax.swing.JCheckBox();
        goButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        maxDistTextField = new javax.swing.JTextField();
        mDeltaPercTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        chartsPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        kTextField.setText("3");

        jLabel1.setText("k");

        prevButton.setText("Prev");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        normalizeByKCheckBox.setText("Normalize by k");

        normalizeByMaxCheckBox.setText("Normalize by Max");

        goButton.setText("go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("max distance");

        maxDistTextField.setText("2000");

        mDeltaPercTextField.setText("0.1");

        jLabel3.setText("M delta perc.");

        resultsTextArea.setColumns(20);
        resultsTextArea.setRows(5);
        jScrollPane1.setViewportView(resultsTextArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(itTextField)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(goButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(prevButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(startButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refreshButton))
                            .addComponent(normalizeByKCheckBox)
                            .addComponent(normalizeByMaxCheckBox)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(maxDistTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(mDeltaPercTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)))
                        .addGap(0, 16, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(refreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevButton)
                    .addComponent(nextButton)
                    .addComponent(goButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(normalizeByKCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(normalizeByMaxCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxDistTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mDeltaPercTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(jPanel1);

        chartsPanel.setBackground(new java.awt.Color(254, 254, 254));

        javax.swing.GroupLayout chartsPanelLayout = new javax.swing.GroupLayout(chartsPanel);
        chartsPanel.setLayout(chartsPanelLayout);
        chartsPanelLayout.setHorizontalGroup(
            chartsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 816, Short.MAX_VALUE)
        );
        chartsPanelLayout.setVerticalGroup(
            chartsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 595, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(chartsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1035, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        try{
            clearChartsPanel();
            int k = Integer.parseInt(this.kTextField.getText());
            wordIt = nelsa.begin(k);
            if(wordIt.next()){
                this.itTextField.setText(B3Nucleotide.toString(wordIt.kmer()));
                makeCharts();
            }
            else{
                wordIt = null;
            }
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        makeCharts();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        try{
            this.setEnabled(false);
            clearChartsPanel();
            
            wordIt = nelsa.find(new B3LLSequence(this.itTextField.getText()));
            if(wordIt != null){
                this.kTextField.setText(""+wordIt.k());
                makeCharts();
            }
            
        }catch(Exception e){
            
        }
        this.setEnabled(true);
    }//GEN-LAST:event_goButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        try{
            if(wordIt != null && wordIt.hasPrev()){
                wordIt.prev();
                this.itTextField.setText(B3Nucleotide.toString(wordIt.kmer()));
                makeCharts();
            }
        }catch(Exception e){}
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        try{
            if(wordIt != null && wordIt.hasNext()){
                wordIt.next();
                this.itTextField.setText(B3Nucleotide.toString(wordIt.kmer()));
                makeCharts();
            }
        }catch(Exception e){}
    }//GEN-LAST:event_nextButtonActionPerformed

    
    private void clearChartsPanel(){
        this.chartsPanel.removeAll();
        //this.chartsPanel.setBackground(Color.RED);
        this.chartsPanel.invalidate();
        this.chartsPanel.repaint();
    }
    
    private void forceChartsPanel(){
        this.chartsPanel.revalidate();
        this.chartsPanel.repaint();
    }
    
    
    private void makeCharts(){
        try{
            clearChartsPanel();
            
            Double maxDist = Double.POSITIVE_INFINITY;
            try{
                if(this.maxDistTextField.getText().trim().length() == 0)
                    maxDist = Double.POSITIVE_INFINITY;
                else
                    maxDist = Double.parseDouble(this.maxDistTextField.getText());
           
            }catch(Exception e){
                maxDist = Double.POSITIVE_INFINITY;
            };
            boolean normalizeByK = this.normalizeByKCheckBox.isSelected();
            boolean normalizeByMax = this.normalizeByMaxCheckBox.isSelected();
            Double mDeltaPerc = Double.parseDouble(this.mDeltaPercTextField.getText());

            ChartPanel rawWordDistr = makeRawDistalDistrChart(maxDist);
            this.chartsPanel.add(rawWordDistr);
            //forceChartsPanel();
            
            //ChartPanel normWordDistr = makeDistalDistrChart(maxDist, normalizeByK, normalizeByMax);
            //this.chartsPanel.add(normWordDistr);
            //forceChartsPanel();
            
            ChartPanel normKDistr = makeKDistrChart(maxDist, normalizeByK, normalizeByMax);
            this.chartsPanel.add(normKDistr);
            //forceChartsPanel();
            
            ChartPanel estDistr = makeEstGeomDistrPanel(this.wordIt, maxDist);
            this.chartsPanel.add(estDistr);
            
            //ChartPanel normKMDistr = makeKMDistrChart(mDeltaPerc, maxDist, normalizeByK, normalizeByMax);
            //this.chartsPanel.add(normKMDistr);
            //forceChartsPanel();
            
            JPanel posistionsPanels = new PositionsPanel(this.wsseq, wordIt.positions());
            this.chartsPanel.add(posistionsPanels);
            
            forceChartsPanel();
            
            this.resultsTextArea.setText("");
            this.resultsTextArea.append("Multiplicity of "+ B3Nucleotide.toString(wordIt.kmer())+" "+ df.format(wordIt.multiplicity()) +"\n");
            this.resultsTextArea.append("Nof (k) distributions "+ df.format(this.nofKDistrs) +"\n");
            this.resultsTextArea.append("Nof (k,m) distributions "+ df.format(this.nofKMDistrs) +"\n");
            
            
            
           Distribution distr =  distrExtractor.getDistribution(wordIt, normalizeByMax);
           Distribution est = distrExtractor.estimateGeometric(igtools.analyses.toRemove.DistalRecurrence.proper_codistances(wordIt));
           
           System.out.println(ExtractByDistrComp.KullbackLeibler(est, distr));
            
        
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
    }
    
    private int nofKDistrs = 0;
    private int nofKMDistrs = 0;
    
    private ChartPanel makeDistalDistrChart(Double maxDist, boolean normalizeByK, boolean normalizeByMax){
        try{
            Distribution distr =  distrExtractor.getDistribution(wordIt, normalizeByMax);
            //distr.convertInFrequency();
            TreeMap<Double,Double> distrValues = distr.distribution;
            final XYSeries series = new XYSeries("");
            for(Map.Entry<Double,Double> entry : distrValues.entrySet()){
                if(entry.getKey() > maxDist)
                    break;
                series.add(entry.getKey(), entry.getValue());
            }
            ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            chart.getChart().setTitle("Normalized word distribution");
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    private ChartPanel makeRawDistalDistrChart(Double maxDist){
        try{
            int[] dists = igtools.analyses.toRemove.DistalRecurrence.proper_codistances(wordIt);
            final XYSeries series = new XYSeries("");
            if(dists != null){
                if(dists.length > 0){
                    int[][] codists = igtools.analyses.toRemove.DistalRecurrence.co_recurrences_array(dists, false);
                    
                    double sum = 0.0;
                    for(int i=0; i<codists[0].length; i++){
                        sum += (double)codists[1][i];
                    }
                    
                    for(int i=0; i<codists[0].length; i++){
                        if(codists[0][i] > maxDist)
                            break;
                        //series.add(codists[0][i], codists[1][i] );
                        series.add(codists[0][i], codists[1][i] / sum);
                    }
                }
            }
            ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            chart.getChart().setTitle("Raw word distribution");
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    private ChartPanel makeKDistrChart(Double maxDist, boolean normalizeByK, boolean normalizeByMax){
        try{
            Distribution distr =  distrExtractor.getCachedByLengthDistr(this.nelsa, wordIt.k(), normalizeByMax);
            distr.convertInFrequency();
            this.nofKDistrs = (int)distr.getNofDistrInside();
            TreeMap<Double,Double> distrValues = distr.distribution;
            final XYSeries series = new XYSeries("");
            for(Map.Entry<Double,Double> entry : distrValues.entrySet()){
                if(entry.getKey() > maxDist)
                    break;
                series.add(entry.getKey(), entry.getValue());
            }
            ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            chart.getChart().setTitle("|k| distribution");
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    /*
    private ChartPanel makeKMDistrChart(Double deltaPerc, Double maxDist, boolean normalizeByK, boolean normalizeByMax){
        try{
            Distribution distr =  distrExtractor.getCombinedDistr(this.nelsa, wordIt.k(),wordIt.multiplicity(), deltaPerc, normalizeByMax);
            this.nofKMDistrs = (int)distr.getNofDistrInside();
            TreeMap<Double,Double> distrValues = distr.distribution;
            final XYSeries series = new XYSeries("");
            for(Map.Entry<Double,Double> entry : distrValues.entrySet()){
                if(entry.getKey() > maxDist)
                    break;
                series.add(entry.getKey(), entry.getValue());
            }
            ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            chart.getChart().setTitle("(|k|,m) distribution");
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }*/
    
    
    private ChartPanel makeEstGeomDistrPanel(IELSAIterator it, double maxDist){
        try{
            final XYSeries series = new XYSeries("");
            
            int[] dists = igtools.analyses.toRemove.DistalRecurrence.proper_codistances(it);
            double ep = 0.0;
            if(dists != null){
                if(dists.length > 0){
                    double n = 0.0;
                    int[][] codists = igtools.analyses.toRemove.DistalRecurrence.co_recurrences_array(dists, false);
                    
                    double mean = 0.0;
                    for(int i=0; i<codists[0].length; i++){
                        mean += (double)codists[0][i];
                        n++;
                    }
                    mean /= n;
                    
                    n = 0.0;
                    for(int i=0; i<codists[0].length; i++){
                        ep += (double)codists[0][i] * (double)codists[1][i];
                        n += (double)codists[1][i];
                        
                        //ep += (double)codists[0][i] * ((double)codists[1][i] / mean);
                        //n += (double)codists[1][i] / mean;
                        
                        //ep += (double)codists[0][i];
                        //n++;
                    }
                    
                    ep = n/ep;
                    System.out.println("ep "+ep);
                    
                    for(int i=0; i<codists[0].length; i++){
                        if(codists[0][i] > maxDist)
                            break;
                        series.add((double)codists[0][i], Math.pow(1.0-ep, (double)codists[0][i]) * ep);
                        //series.add((double)codists[0][i], Math.pow(1.0-ep, (double)codists[0][i]) /mean * ep);
                    }
                }
            }
            ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            //chart.getChart().setTitle("Raw word distribution");
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    
    private ChartPanel makeRandKDistrChart(){
        try{
        
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    private ChartPanel makeRandKMDistrChart(){
        try{
        
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    
    private ChartPanel makeRawChart(final XYSeries series, final String xLabel, final String yLabel){
            //, final int xSize, final int ySize){
        final XYSeriesCollection dataset = new XYSeriesCollection(series);
        
        final JFreeChart chart = ChartFactory.createXYBarChart(
                                        null, 
                                        xLabel, 
                                        false, 
                                        yLabel, 
                                        dataset, 
                                        PlotOrientation.VERTICAL, 
                                        false, 
                                        true, 
                                        false);
        
        
        /*JFreeChart chart = ChartFactory.createXYStepChart 
                                                ( 
                                                null, 
                                                xLabel, 
                                                yLabel, 
                                                dataset, 
                                                PlotOrientation.VERTICAL, 
                                                true, // legend 
                                                true, // tooltips 
                                                false // urls 
                                                ); 
        */
        
        final ChartPanel chartPanel = new ChartPanel(chart){
            @Override
            public Dimension getPreferredSize() {
                return new Dimension(chartsPanel.getWidth() / nofChartCols,  chartsPanel.getHeight() / nofChartRows);
            }
        };
        
        chartPanel.setMinimumDrawWidth( 0 );
        chartPanel.setMinimumDrawHeight( 0 );
        chartPanel.setMaximumDrawWidth( 1920 );
        chartPanel.setMaximumDrawHeight( 1200 );
        
        //chartPanel.setPreferredSize(center_panel.getPreferredSize());
        chart.setBackgroundPaint(Color.white);
        //chartPanel.setMouseZoomable(false);
        chartPanel.setMouseWheelEnabled(true);
        
        
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        ((XYBarRenderer) plot.getRenderer()).setBarPainter(new StandardXYBarPainter());
        plot.getRenderer().setSeriesPaint( 0, Color.BLUE);
        plot.setDomainPannable(true);
        plot.setRangePannable(true);
        
        plot.getDomainAxis().setAutoTickUnitSelection(true);
        //((NumberAxis)plot.getDomainAxis()).setTickUnit(new NumberTickUnit(0.1));
        //plot.getDomainAxis().setStandardTickUnits(NumberAxis.createStandardTickUnits());
        
        
        /*
        chart.setBackgroundPaint(Color.WHITE);
        chart.getPlot().setBackgroundPaint(Color.WHITE);
        final XYPlot plot = chart.getXYPlot(); 
        plot.getRenderer().setSeriesPaint(0, Color.BLUE);
        //plot.getDomainAxis().setStandardTickUnits(NumberAxis.createStandardTickUnits());
        //plot.getRenderer().setBarPainter(new StandardXYBarPainter());
        */
        
        return chartPanel;
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartsPanel;
    private javax.swing.JButton goButton;
    private javax.swing.JTextField itTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField kTextField;
    private javax.swing.JTextField mDeltaPercTextField;
    private javax.swing.JTextField maxDistTextField;
    private javax.swing.JButton nextButton;
    private javax.swing.JCheckBox normalizeByKCheckBox;
    private javax.swing.JCheckBox normalizeByMaxCheckBox;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
}
