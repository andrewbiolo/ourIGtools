/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package igtools.gui2.codistances.distributions;

import igtools.analyses.clustering.Cluster;
import igtools.analyses.clustering.DkDistances;
import igtools.analyses.clustering.DkVectors;
import igtools.analyses.clustering.Hierarchical1;
import igtools.analyses.clustering.StreamAlgo1;
import igtools.analyses.recurrences.distances.LimitedProperGlobalRecurrenceDistancesExtractor;
import igtools.analyses.recurrences.distances.ProperAverageDistribution;
import igtools.analyses.recurrences.distances.ProperMinimalRecurrenceDistancesExtractor;
import igtools.analyses.recurrences.distances.ProperRecurrenceDistancesExtractor;
import igtools.analyses.recurrences.distances.RandomMinimalProperRecurrenceDistances;
import igtools.analyses.recurrences.distances.enclosed.ProperEnclosedExtractor;
import igtools.analyses.recurrences.expcomp.KExpComp;
import igtools.analyses.toRemove.Distribution;
import igtools.analyses.toRemove.ExtractByDistrComp;
import igtools.common.distributions.DistributionUtils;
import igtools.common.distributions.EstimatedDistribution;
import igtools.common.distributions.distance.DistributionDistance;
import igtools.common.distributions.distance.KLDistance;
import igtools.common.distributions.distance.KSDistance;
import igtools.common.distributions.distance.PointDiffSUMDistance;
import igtools.common.distributions.peaks.ExpDistributionPeakFinder;
import igtools.common.nucleotide.B3Nucleotide;
import igtools.common.sequence.B3LLSequence;
import igtools.common.sequence.B3Sequence;
import igtools.dictionaries.elsa.DLNELSA;
import igtools.dictionaries.elsa.IELSAIterator;
import igtools.dictionaries.elsa.NELSA;
import igtools.dictionaries.elsa.PositionArrayIterator;
import igtools.gui2.WSSequence;
import igtools.gui2.positions.PositionsPanel;
import igtools.gui2.wordList.WLFlatViewFrame;

import java.awt.Color;
import java.awt.Dimension;
import java.io.FileWriter;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.Map;
import java.util.TreeMap;
import java.util.Vector;

import javax.swing.BoxLayout;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.entity.XYItemEntity;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYBarPainter;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author vbonnici
 */
public class ProperEDistalDistributionsFrame extends javax.swing.JFrame {

     private final DecimalFormat df = new DecimalFormat("###,###,###,###");
    
    private WSSequence wsseq;
    private NELSA nelsa;
    
    private final int nofChartRows = 4;
    private final int nofChartCols = 1;
    
    private IELSAIterator wordIt = null;
    
    
    private int pickedDistance = -1;
    
    /**
     * Creates new form DistalDistributionsFrame
     */
    public ProperEDistalDistributionsFrame(WSSequence wsseq) {
        this.wsseq = wsseq;
        this.nelsa = wsseq.getNELSA();
        
        initComponents();
        this.setTitle("General trends: "+wsseq.getName());
        
        //this.chartsPanel.setLayout(new GridLayout(nofChartRows, nofChartCols));
        this.chartsPanel.setLayout(new BoxLayout(this.chartsPanel, BoxLayout.Y_AXIS));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        kTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        itTextField = new javax.swing.JTextField();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        goButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        maxDistTextField = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        overlappingCheckBox = new javax.swing.JCheckBox();
        ngapsCheckBox = new javax.swing.JCheckBox();
        jSeparator5 = new javax.swing.JSeparator();
        showAvgDistrCheckBox = new javax.swing.JCheckBox();
        showEstGeomCheckBox = new javax.swing.JCheckBox();
        showEstExpCheckBox = new javax.swing.JCheckBox();
        showEstFExpCheckBox = new javax.swing.JCheckBox();
        showLocationsCheckBox = new javax.swing.JCheckBox();
        showRandomizedCheckBox = new javax.swing.JCheckBox();
        minimalCheckBox = new javax.swing.JCheckBox();
        frequencyCheckBox = new javax.swing.JCheckBox();
        resampledCheckBox = new javax.swing.JCheckBox();
        peaksCheckBox = new javax.swing.JCheckBox();
        Test3Peaks = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        pickLabel = new javax.swing.JLabel();
        showPickJButton = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JSeparator();
        verifyExpRepeatsJButton = new javax.swing.JButton();
        clustersJButton = new javax.swing.JButton();
        distances2ExpCheckBox = new javax.swing.JCheckBox();
        jSeparator8 = new javax.swing.JSeparator();
        jSeparator9 = new javax.swing.JSeparator();
        chartsPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(250, 200));
        jScrollPane2.setOpaque(false);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(250, 650));

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        kTextField.setText("3");

        jLabel1.setText("k");

        prevButton.setText("Prev");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        goButton.setText("go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("max distance");

        maxDistTextField.setText("2000");

        jScrollPane1.setEnabled(false);

        resultsTextArea.setColumns(20);
        resultsTextArea.setRows(5);
        jScrollPane1.setViewportView(resultsTextArea);

        jButton1.setText("Export");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        overlappingCheckBox.setText("overlapping");

        ngapsCheckBox.setText("allow N gaps");

        showAvgDistrCheckBox.setText("show Avg Distr.");

        showEstGeomCheckBox.setText("show est. Geometric");

        showEstExpCheckBox.setText("show est. Exponential");

        showEstFExpCheckBox.setText("show est. FExponential");

        showLocationsCheckBox.setText("show Locations");

        showRandomizedCheckBox.setText("show randomized Distr.");

        minimalCheckBox.setSelected(true);
        minimalCheckBox.setText("minimal");

        frequencyCheckBox.setSelected(true);
        frequencyCheckBox.setText("convert in frequency");

        resampledCheckBox.setText("Resampled");

        peaksCheckBox.setText("Peaks");

        Test3Peaks.setText("Test 3-peak");
        Test3Peaks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Test3PeaksActionPerformed(evt);
            }
        });

        pickLabel.setText("Pick");

        showPickJButton.setText("Show pick");
        showPickJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPickJButtonActionPerformed(evt);
            }
        });

        verifyExpRepeatsJButton.setText("Verify exp repeats");
        verifyExpRepeatsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyExpRepeatsJButtonActionPerformed(evt);
            }
        });

        clustersJButton.setText("Clusters");
        clustersJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clustersJButtonActionPerformed(evt);
            }
        });

        distances2ExpCheckBox.setText("Distances to exp.");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(itTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(goButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(prevButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(startButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jSeparator4)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator9, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator6)
                    .addComponent(jSeparator7)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(maxDistTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2))
                            .addComponent(overlappingCheckBox)
                            .addComponent(ngapsCheckBox)
                            .addComponent(showAvgDistrCheckBox)
                            .addComponent(showEstGeomCheckBox)
                            .addComponent(showEstExpCheckBox)
                            .addComponent(showEstFExpCheckBox)
                            .addComponent(showLocationsCheckBox)
                            .addComponent(showRandomizedCheckBox)
                            .addComponent(minimalCheckBox)
                            .addComponent(frequencyCheckBox)
                            .addComponent(resampledCheckBox)
                            .addComponent(peaksCheckBox)
                            .addComponent(distances2ExpCheckBox)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Test3Peaks)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clustersJButton))
                            .addComponent(pickLabel)
                            .addComponent(showPickJButton)
                            .addComponent(verifyExpRepeatsJButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(refreshButton)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevButton)
                    .addComponent(nextButton)
                    .addComponent(goButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxDistTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frequencyCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minimalCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(overlappingCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ngapsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showAvgDistrCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showEstGeomCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showEstExpCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showEstFExpCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showRandomizedCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showLocationsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resampledCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peaksCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(distances2ExpCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Test3Peaks)
                    .addComponent(clustersJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pickLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showPickJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verifyExpRepeatsJButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        jSplitPane1.setLeftComponent(jScrollPane2);
        jScrollPane2.getAccessibleContext().setAccessibleName("");

        chartsPanel.setBackground(new java.awt.Color(254, 254, 254));
        chartsPanel.setPreferredSize(new java.awt.Dimension(1327, 200));

        javax.swing.GroupLayout chartsPanelLayout = new javax.swing.GroupLayout(chartsPanel);
        chartsPanel.setLayout(chartsPanelLayout);
        chartsPanelLayout.setHorizontalGroup(
            chartsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1297, Short.MAX_VALUE)
        );
        chartsPanelLayout.setVerticalGroup(
            chartsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 809, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(chartsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1553, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        try{
            clearChartsPanel();
            int k = Integer.parseInt(this.kTextField.getText());
            wordIt = nelsa.begin(k);
            if(wordIt.next()){
                this.itTextField.setText(B3Nucleotide.toString(wordIt.kmer()));
                makeCharts();
            }
            else{
                wordIt = null;
            }
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        makeCharts();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        try{
            this.setEnabled(false);
            clearChartsPanel();
            
            wordIt = nelsa.find(new B3LLSequence(this.itTextField.getText()));
            if(wordIt != null){
                this.kTextField.setText(""+wordIt.k());
                makeCharts();
            }
            
        }catch(Exception e){
            
        }
        this.setEnabled(true);
    }//GEN-LAST:event_goButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        try{
            if(wordIt != null && wordIt.hasPrev()){
                wordIt.prev();
                this.itTextField.setText(B3Nucleotide.toString(wordIt.kmer()));
                makeCharts();
            }
        }catch(Exception e){}
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        try{
            if(wordIt != null && wordIt.hasNext()){
                wordIt.next();
                this.itTextField.setText(B3Nucleotide.toString(wordIt.kmer()));
                makeCharts();
            }
        }catch(Exception e){}
    }//GEN-LAST:event_nextButtonActionPerformed

    
    /**
     * Export 
     * 
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(this.wordIt != null){
            JFileChooser chooser = new JFileChooser();
            chooser.setMultiSelectionEnabled(false);
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = chooser.showOpenDialog(this);
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                try{
                    double[][] distr = ProperMinimalRecurrenceDistancesExtractor.factory(this.overlappingCheckBox.isSelected(), !this.ngapsCheckBox.isSelected()).recurrenceDistanceDistribution(wordIt);
                    
                    if(distr.length > 0){
                    
                        FileWriter printer = new FileWriter(chooser.getSelectedFile(), false);

                        printer.write(distr[0][0]+" "+distr[0][1]+"\n");
                        for(int i=1; i<distr.length; i++){
                            for(double j=distr[i-1][0]+1; j<distr[i][0]; j++)
                                printer.write(j+" 0.0"+"\n");
                            printer.write(distr[i][0]+" "+distr[i][1]+"\n");
                        }
                        
                        printer.flush();
                        printer.close();
                    }
                }catch(Exception e){
                    e.printStackTrace();
                    System.out.println(e);
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void Test3PeaksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Test3PeaksActionPerformed
    	//TODO Nicola Gaburro
       
    	
    	//distr and peaks skip null (zero value) recurrence distances
    	
    	
    	
    	//get alpha-alpha recurrence distance distribution 
    	//alpha = wordIt
    	// distr[i][0] = recurrence distance
    	// distr[i][1] = number of recurrences = number of alpha-alpha at distance distr[i][0]
    	double[][] distr = getRecurrenceExtractor( Double.POSITIVE_INFINITY).recurrenceDistanceDistribution(wordIt);
    	
    	

        
    	if(distr.length > 0){
    		try{
    			// normalize = sum of bars is 1.0
    			DistributionUtils.normalize(distr);
    			
    			//recognize peaks 
    			//with resample parameter = 0.01
    			TreeMap<Double,Double> peaks = ExpDistributionPeakFinder.findPeakPositions2(distr, 0.01);
    			//for(Map.Entry<Double,Double> entry : peaks.entrySet){
    			// entry.getKey  == recurrence distance
    			// entry.getValue == number of recurrences
    			//}
    			
    	    	
    			
    			
                
            }catch(Exception e){
            	System.out.println(e);
            	e.printStackTrace();
            }
        }
        
    	
    }//GEN-LAST:event_Test3PeaksActionPerformed

    private void showPickJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPickJButtonActionPerformed
    	//TODO
        if(this.pickedDistance > -1 && this.wordIt!=null){
            ProperEnclosedExtractor pee = ProperEnclosedExtractor.factory();
            int[] p_pos = pee.getEnclosedStartPositions(wordIt, pickedDistance);
            int[] end = new int[p_pos.length];
            int k = wordIt.k();
            for(int i=0; i<end.length; i++)
            	end[i] = p_pos[i]+pickedDistance+k;
            
            
            System.out.println("nof " +p_pos.length);
//            PositionArrayIterator it = new PositionArrayIterator(p_pos, wordIt.k()+ pickedDistance, this.wsseq.getB3seq());
//            PositionArrayIterator it_c = (PositionArrayIterator)it.clone();
//            int count = 0;
//            while(it_c.next()){
//                count++;
//            }
//            System.out.println("ecount " + count);
//            B3Nucleotide[][] kmers = new B3Nucleotide[count][];
//            int i=0;
//            while(it.next()){
//                kmers[i] = it.kmer();
//                //System.out.println(B3Nucleotide.toString(it.kmer()) +" - "+ B3Nucleotide.toString(kmers[i]));
//                i++;
//            }
            WLFlatViewFrame wlfwf = new WLFlatViewFrame(wsseq.getName()+" "+ B3Nucleotide.toString(wordIt.kmer())+" "+pickedDistance, 
            		this.wsseq.getB3seq(), p_pos, end);
            wlfwf.setVisible(true);
            
            
        }
    }//GEN-LAST:event_showPickJButtonActionPerformed

    private void verifyExpRepeatsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyExpRepeatsJButtonActionPerformed
    	//TODO Silvia
        if(wordIt != null){
            
            //get alpha-alpha recurrence distance distribution 
            //alpha = wordIt
            // distr[i][0] = recurrence distance
            // distr[i][1] = number of recurrences = number of alpha-alpha at distance distr[i][0]
            double[][] distr = getRecurrenceExtractor( Double.POSITIVE_INFINITY).recurrenceDistanceDistribution(wordIt);
            
            
            
            //estimated distribution
            //EstimatedDistribution edistr = new EstimatedDistribution.FExponentialBased();
            //edistr.estimateDistrParameter(distr);
            //for(int i=0; i<distr.length; i++){
            //    estValue = edistr.getValue( distr[i][0]  );
            //}
            
            
            for(int d_i=0; d_i < distr.length; d_i++){
                int recDistance = (int)(distr[d_i][0]);
                
                
                //get enclosed regions
                ProperEnclosedExtractor pee = ProperEnclosedExtractor.factory();
                int[] p_pos = pee.getEnclosedStartPositions(wordIt, recDistance);
                PositionArrayIterator it = new PositionArrayIterator(p_pos, wordIt.k()+ recDistance, this.wsseq.getB3seq());
                PositionArrayIterator it_c = (PositionArrayIterator)it.clone();
                int count = 0;
                while(it_c.next()){
                    count++;
                }
                System.out.println("ecount " + count);
                B3Nucleotide[][] kmers = new B3Nucleotide[count][];
                int i=0;
                while(it.next()){
                    kmers[i] = it.kmer();
                    //System.out.println(B3Nucleotide.toString(it.kmer()) +" - "+ B3Nucleotide.toString(kmers[i]));
                    i++;
                }
            
                //kmers[i] is and eclosed region of alpha-alpha at recurrence distance recDistance
                
                
            
            }
        }
    }//GEN-LAST:event_verifyExpRepeatsJButtonActionPerformed

    
    
    private void shuffle(int[] start, int[] end, double p){
    	int nofShuffles = (int)(((double)start.length)*p);
    	int i1, i2, tmp;
    	for(int i=0; i<nofShuffles; i++){
    		i1 = (int)(Math.random()*((double)start.length));
    		i2 = (int)(Math.random()*((double)start.length));
    		
    		tmp = start[i1];
    		start[i1] = start[i2];
    		start[i2] = tmp;
    		
    		tmp = end[i1];
    		end[i1] = end[i2];
    		end[i2] = tmp;
    	}
    }
    
    private void clustersJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clustersJButtonActionPerformed
        // TODO
    	if(this.pickedDistance > -1 && this.wordIt!=null){
    		 ProperEnclosedExtractor pee = ProperEnclosedExtractor.factory();
             
    		 
    		 int[] p_pos = pee.getEnclosedStartPositions(wordIt, pickedDistance);
    		 
    		 
    		 
    		 int newNof = 200; if(newNof>p_pos.length)newNof = p_pos.length;
    		 //int newNof  = p_pos.length;
    		 
    		 int[] start = Arrays.copyOf(p_pos, newNof);
    		 
             int[] end = new int[start.length];
             
             
             int k = wordIt.k();
             for(int i=0; i<end.length; i++)
             	end[i] = start[i]+pickedDistance+k;
             
             
             //shuffle(start, end, 0.2);
             
             Vector<Cluster> clusters = new Vector<Cluster>();
             
//             Hierarchical1.run(
//            		 this.wsseq.getB3seq(), 
//            		 start, 
//            		 end, 
//            		 0.1, 
//            		 0,0,
//            		 DkDistances.factory(DkDistances.DISTANCE.JACCARD_SIMILARITY), 
//            		 clusters);
             
             StreamAlgo1.run(
            		 this.wsseq.getB3seq(), 
            		 start, 
            		 end, 
            		 0.1, 
            		 1,11,
            		 DkDistances.factory(DkDistances.DISTANCE.GENERALIZED_JACCARD_DISTANCE), 
            		 clusters);
             
             
             
             
             
             System.out.println("nof clusters "+clusters.size());
             for(Cluster c : clusters){
            	 System.out.print("(");
            	 for(Integer s : c.elementIds){
            		 System.out.print(s +" ");
            	 }
            	 System.out.println(")");
             }
             
             int s_end = this.wsseq.getB3seq().length();
             int[] c_start = new int[start.length + clusters.size()];
             int[] c_end = new int[c_start.length];
             
             int c_i = 0;
             for(Cluster c : clusters){
            	 System.out.print("{");
            	 
            	 for(Integer s : c.elementIds){
            		 //System.out.print("("+s+","+start[s]+")");
            		 System.out.print(s+" ");
            		 
            		 c_start[c_i] = start[s];
            		 c_end[c_i] = end[s];
            		 c_i++;
            	 }
            	 
            	 c_start[c_i] = s_end;
            	 c_end[c_i] = s_end+k;
            	 c_i++;
            	 
            	 System.out.println("}");
             }
             WLFlatViewFrame wlfwf = new WLFlatViewFrame(wsseq.getName()+" "+ B3Nucleotide.toString(wordIt.kmer())+" "+pickedDistance, this.wsseq.getB3seq(), c_start, c_end);
             wlfwf.setVisible(true);
             
        }
    	
    }//GEN-LAST:event_clustersJButtonActionPerformed

    
    private void clearChartsPanel(){
        this.chartsPanel.removeAll();
        //this.chartsPanel.setBackground(Color.RED);
        this.chartsPanel.invalidate();
        this.chartsPanel.repaint();
    }
    
    private void forceChartsPanel(){
        this.chartsPanel.revalidate();
        this.chartsPanel.repaint();
    }
    
    
    private void makeCharts(){
        try{
            
            clearChartsPanel();
             this.resultsTextArea.setText("");
            
            Double maxDist = Double.POSITIVE_INFINITY;
            try{
                if(this.maxDistTextField.getText().trim().length() == 0)
                    maxDist = Double.POSITIVE_INFINITY;
                else
                    maxDist = Double.parseDouble(this.maxDistTextField.getText());
           
            }catch(Exception e){
                maxDist = Double.POSITIVE_INFINITY;
            };

            ChartPanel rawWordDistr = makeDistalDistrChart(maxDist);
            this.chartsPanel.add(rawWordDistr);
           
            
            if(this.resampledCheckBox.isSelected()){
            	ChartPanel pp = makeResampledDistrPanel(maxDist);
                this.chartsPanel.add(pp);
            }
            
            if(this.peaksCheckBox.isSelected()){
            	ChartPanel pp = makePeaksDistrPanel(maxDist);
                this.chartsPanel.add(pp);
            }
            
            if(this.showAvgDistrCheckBox.isSelected()){
            	ChartPanel pp = makeAvgDistrPanel(
            			wordIt, maxDist);
                this.chartsPanel.add(pp);
            }
            
            if(this.showEstGeomCheckBox.isSelected()){
            	ChartPanel pp = makeEstDistrPanel(
            			maxDist, 
            			new EstimatedDistribution.GeometricBased(), 
            			"Geometric");
                this.chartsPanel.add(pp);
            }
            
            if(this.showEstExpCheckBox.isSelected()){
            	ChartPanel pp = makeEstDistrPanel(
            			maxDist, 
            			new EstimatedDistribution.ExponentialBased(), 
            			"Exponential");
                this.chartsPanel.add(pp);
            }
            
            if(this.showEstFExpCheckBox.isSelected()){
            	ChartPanel pp = makeEstDistrPanel(
            			maxDist, 
            			new EstimatedDistribution.FExponentialBased(), 
            			"Flanagan Exponential");
                this.chartsPanel.add(pp);
            }
            
            if(this.showRandomizedCheckBox.isSelected()){
            	ChartPanel pp = makeRandomizedDistrPanel(wordIt, maxDist);
            	this.chartsPanel.add(pp);
            }
            
            if(this.showLocationsCheckBox.isSelected()){
            	JPanel posistionsPanels = new PositionsPanel(this.wsseq, wordIt.positions());
                this.chartsPanel.add(posistionsPanels);
            }
            
       
            
            
            
            forceChartsPanel();
            
           
            this.resultsTextArea.append("Multiplicity of "+ B3Nucleotide.toString(wordIt.kmer())+" "+ df.format(wordIt.multiplicity()) +"\n");
            this.resultsTextArea.append("Nof (k) distributions "+ df.format(this.nofKDistrs) +"\n");
            this.resultsTextArea.append("Nof (k,m) distributions "+ df.format(this.nofKMDistrs) +"\n");
            
            
            if(this.distances2ExpCheckBox.isSelected()){
                this.resultsTextArea.append("KL dist." + KExpComp.distanceToExponential(wordIt, new KLDistance(), 0.01) +"\n");
                this.resultsTextArea.append("MaxKL dist." + KExpComp.distanceToExponential(wordIt, new KLDistance.MaxKLDistance(), 0.01) +"\n");
                this.resultsTextArea.append("KS dist." + KExpComp.distanceToExponential(wordIt, new KSDistance(), 0.01) +"\n");
                this.resultsTextArea.append("SUM dist." + KExpComp.distanceToExponential(wordIt, new PointDiffSUMDistance(), 0.01) +"\n");
            }
            
        
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
    }
    
    private int nofKDistrs = 0;
    private int nofKMDistrs = 0;
    
    
    private ProperRecurrenceDistancesExtractor getRecurrenceExtractor(Double maxDist){
    	if(!this.minimalCheckBox.isSelected() && maxDist!=Double.POSITIVE_INFINITY){
    		System.out.println("limited global recurrences "+maxDist);
    		LimitedProperGlobalRecurrenceDistancesExtractor lpgre =LimitedProperGlobalRecurrenceDistancesExtractor.factory(this.overlappingCheckBox.isSelected(), !this.ngapsCheckBox.isSelected());
    		lpgre.setMaxDist(maxDist);
    		return lpgre;
    	}
    	else
    		return ProperRecurrenceDistancesExtractor.factory(this.minimalCheckBox.isSelected(), this.overlappingCheckBox.isSelected(), !this.ngapsCheckBox.isSelected());
    }
    
    
    private ChartPanel makeDistalDistrChart(Double maxDist){
        try{
            
            double[][] distr = getRecurrenceExtractor(maxDist).recurrenceDistanceDistribution(wordIt);
            
            final XYSeries series = new XYSeries("");
            ChartPanel chart;
            
            if(this.frequencyCheckBox.isSelected()){
	            //final XYSeries series = new XYSeries("");
	            if(distr.length > 0){
	                double sum = 0.0;
					for(int i=0; i<distr.length; i++)
						sum += distr[i][1];
	                
	                double dp = 0.0;
	                
	                for(int i=0; i<distr.length; i++){
	                    if(distr[i][0] > maxDist)
	                        break;
	                    for(double j=dp; j<distr[i][0] && j<maxDist; j++)
	                        series.add(j,0.0);
	                    series.add(distr[i][0], distr[i][1] / sum);
	                    dp = distr[i][0];
	                }
	            }
	            chart =  makeRawChart(series, "Distance", "Frequency");
	            chart.getChart().setTitle("Raw word distribution");
	            //return chart;
            }
            else{
            	//final XYSeries series = new XYSeries("");
	            if(distr.length > 0){
	                
	                double dp = 0.0;
	                
	                for(int i=0; i<distr.length; i++){
	                    if(distr[i][0] > maxDist)
	                        break;
	                    for(double j=dp; j<distr[i][0] && j<maxDist; j++)
	                        series.add(j,0.0);
	                    series.add(distr[i][0], distr[i][1]);
	                    dp = distr[i][0];
	                }
	            }
	            chart =  makeRawChart(series, "Distance", "Multiplicity");
	            chart.getChart().setTitle("Raw word distribution");
	            //return chart;
            }
            
            
            
            //pick
            chart.addChartMouseListener(new ChartMouseListener() {
                @Override
                public void chartMouseClicked(ChartMouseEvent cme) {

                    Plot p = cme.getChart().getPlot();
                    if(p instanceof XYPlot){                    
                        if(cme.getEntity() instanceof XYItemEntity){                        
                            int seriesIndex = ((XYItemEntity)cme.getEntity()).getSeriesIndex();
                            int item = ((XYItemEntity)cme.getEntity()).getItem();
                            //XYSeries series = ((XYSeriesCollection)dataset).getSeries(seriesIndex);
                            XYDataItem xyItem = series.getDataItem(item);
                            System.out.println(xyItem);
                            System.out.println(seriesIndex + "\t" + item);

                             System.out.println(xyItem.getX().intValue());
                             pickedDistance = xyItem.getX().intValue();
                             
                             pickLabel.setText("Pick [" + pickedDistance+","+xyItem.getY().intValue()+"]");
                             
                            /*picked_dist = xyItem.getX().intValue();
                            picked_count = xyItem.getY().intValue();

                            pickedPairLabel.setText("("+df.format(picked_dist)+" ; "+df.format(picked_count)+")");
                            view_words_button.setEnabled(true);
                            viewPosButton.setEnabled(true);*/

                            return;
                        }
                    }

                    pickedDistance = -1;
                    pickLabel.setText("Pick");
                    /*picked_dist = -1;
                    picked_count = -1;
                    pickedPairLabel.setText("");
                    view_words_button.setEnabled(false);
                    viewPosButton.setEnabled(false);*/
                }

                @Override
                public void chartMouseMoved(ChartMouseEvent cme) {
                }

            });
            
            
            
            return chart;
            
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    private ChartPanel makeResampledDistrPanel(double maxDist){
    	double[][] distr =getRecurrenceExtractor(maxDist).recurrenceDistanceDistribution(wordIt);
    	
    	
    	final XYSeries series = new XYSeries("");
        
    	if(distr.length > 0){
    		try{
    			DistributionUtils.normalize(distr);
    			DistributionUtils.resample(distr, 0.01);
    			//DistributionUtils.linearResample(distr, 0.01);
    			//double bdistr = KExpComp.expGDistrFirst(distr);
    			//DistributionUtils.lowPass(distr, bdistr, 0.05);
    	    	
    			double dp = 0.0;
                
                for(int i=0; i<distr.length; i++){
                    if(distr[i][0] > maxDist)
                        break;
                    for(double j=dp; j<distr[i][0] && j<maxDist; j++)
                        series.add(j,0.0);
                    series.add(distr[i][0], distr[i][1]);
                    dp = distr[i][0];
                }
    	    	
                
            }catch(Exception e){
            	System.out.println(e);
            	e.printStackTrace();
            }
        }
        
        ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
        chart.getChart().setTitle("Resampled");
        return chart;
    }
    
    
    /* qua c'è il metodo che da la distribuzione */
    
    private ChartPanel makePeaksDistrPanel(double maxDist){
//    	Map<Double,Double> it_distr = ProperMinimalRecurrenceDistancesExtractor.factory(false, true).recurrenceDistanceDistributionMap(it);
//		//DistributionUtils.normalize(it_distr);
//		double[][] aa = DistributionUtils.toArray(it_distr);
//		if(resampleP>0.0){
//			DistributionUtils.resample(aa, resampleP);
//		}
//		EstimatedDistribution estimator = new EstimatedDistribution.FExponentialBased();
//		//EstimatedDistribution gestimator = new EstimatedDistribution.ExponentialBased();
//		EstimatedDistribution gestimator = new EstimatedDistribution.GeometricBased();
//		Map<Double,Double> e_distr = new TreeMap<Double,Double>();
//		//double[][] aa = DistributionUtils.toArray(it_distr);
//		try{//sometimes it sucks
//			estimator.estimateDistrParameter(aa);
//			for(Map.Entry<Double, Double> en : it_distr.entrySet()){
//				e_distr.put(en.getKey(), estimator.getValue(en.getKey()));
//			}
//		}catch(Exception e){
//			gestimator.estimateDistrParameter(aa);
//			for(Map.Entry<Double, Double> en : it_distr.entrySet()){
//				e_distr.put(en.getKey(), gestimator.getValue(en.getKey()));
//			}
//		}
//		DistributionUtils.normalize(it_distr);
//		DistributionUtils.normalize(e_distr);
    	
    	
    	double[][] distr = getRecurrenceExtractor(maxDist).recurrenceDistanceDistribution(wordIt);
    	
    	
    	final XYSeries series = new XYSeries("");
        
    	if(distr.length > 0){
    		try{
    			DistributionUtils.normalize(distr);
    			
    			double resampleP = 0.0;
    			//if(this.resampledCheckBox.isSelected())
    				resampleP = 0.01;
    	    	
    			TreeMap<Double,Double> peaks = ExpDistributionPeakFinder.findPeakPositions2(distr, resampleP);    			
    			
    			double dp = 0.0;
                Double pkvalue;
                
                for(int i=0; i<distr.length; i++){
                    if(distr[i][0] > maxDist)
                        break;
                    for(double j=dp; j<distr[i][0] && j<maxDist; j++)
                        series.add(j,0.0);
                    
                    pkvalue = peaks.get(distr[i][0]);
                    
                    if(pkvalue!=null)
                    	series.add(distr[i][0], pkvalue);
                    else
                    	series.add(distr[i][0], 0.0);
                    
                    dp = distr[i][0];
                }
    	    	
                
            }catch(Exception e){
            	System.out.println(e);
            	e.printStackTrace();
            }
        }
        
        ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
        chart.getChart().setTitle("Peaks");
        return chart;
    }
    
    
    
    
    private ChartPanel makeEstDistrPanel(double maxDist, EstimatedDistribution edistr, String pName){
    	try{
    		
	    	double[][] distr = getRecurrenceExtractor(maxDist).recurrenceDistanceDistribution(wordIt);
	    		    	
	    	
	    	final XYSeries series = new XYSeries("");
	        
	    	if(distr.length > 0){
	    		try{
	    			DistributionUtils.normalize(distr);
	    			if(this.resampledCheckBox.isSelected())
	    				DistributionUtils.resample(distr, 0.01);
	    	    	
	    	    	DistributionDistance dd = new KLDistance.MaxKLDistance();
	    	    	DistributionDistance dds = new PointDiffSUMDistance();
	    	    	
	        		Map<Double,Double> e_distr = new TreeMap<Double,Double>();
	        		
	        		Map<Double,Double> it_distr = DistributionUtils.toTreeMap(distr);
	        		
	        		
	    			
	                edistr.estimateDistrParameter(distr);
	                
	                double dp = 0.0;
	                
	                for(int i=0; i<distr.length; i++){
	                    if(distr[i][0] > maxDist)
	                        break;
	                    
	                    for(double j=dp; j<distr[i][0] && j<maxDist; j++){
	                        series.add(j, edistr.getValue(j));
	                        //series.add(j, 0.0);
	                        
	                        e_distr.put(j, edistr.getValue(j));
	                    }
	                    
	                    series.add(distr[i][0], edistr.getValue(distr[i][0]));
	                    e_distr.put(distr[i][0], edistr.getValue(distr[i][0]));
	                    
	                    dp = distr[i][0];
	                }
	                
	                this.resultsTextArea.append(pName+" KL "+ dd.distance(it_distr, e_distr) +"\n");
	                this.resultsTextArea.append(pName+" PSumDiff "+ dds.distance(it_distr, e_distr) +"\n");
	                
                }catch(Exception e){
                	System.out.println(e);
                }
	        }
	        
	        ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            chart.getChart().setTitle(pName);
            return chart;
	        
    	}catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    
    
    private ProperAverageDistribution pad = null;
    
    private boolean pMinimal = true;
    private Double pMaxDist = Double.POSITIVE_INFINITY;
    private boolean pOverlap = false;
    private boolean pGaps = false;
    private int pk = 0;
    
    private Map<Double,Double> getAvgDistribution(Double maxDist){
    	
    	System.out.println(pad == null);
    	System.out.println(pMinimal != this.minimalCheckBox.isSelected()); 
		//System.out.println(pMaxDist != maxDist); System.out.println(pMaxDist +" "+maxDist);//TODO
		System.out.println(pOverlap != this.overlappingCheckBox.isSelected());
		System.out.println(pGaps != this.ngapsCheckBox.isSelected());
		System.out.println(pk != wordIt.k());
    	
		if(		pad == null ||
				pMinimal != this.minimalCheckBox.isSelected() || 
				//pMaxDist != maxDist ||//TODO
				pOverlap != this.overlappingCheckBox.isSelected() ||
				pGaps != this.ngapsCheckBox.isSelected() ||
				pk != wordIt.k()
				){
			System.out.println("reaveraging");
			pad = null;
			
			ProperRecurrenceDistancesExtractor extractor;
			
			if(this.minimalCheckBox.isSelected()){
				extractor = 
						ProperRecurrenceDistancesExtractor.factory(
								true, 
								this.overlappingCheckBox.isSelected(), 
								!this.ngapsCheckBox.isSelected());
			}
			else{
				extractor = LimitedProperGlobalRecurrenceDistancesExtractor.factory(this.overlappingCheckBox.isSelected(), !this.ngapsCheckBox.isSelected());
	    		((LimitedProperGlobalRecurrenceDistancesExtractor)extractor).setMaxDist(maxDist);
			}
			
			pad = new ProperAverageDistribution(nelsa, extractor);
		}
		
		pMinimal = this.minimalCheckBox.isSelected();
		pMaxDist = maxDist;
    	pOverlap = this.overlappingCheckBox.isSelected();
    	pGaps = this.ngapsCheckBox.isSelected();
    	pk = wordIt.k();
    	
    	return pad.getCachedAvgDistribution(wordIt.k());
    }
    
    
    private ChartPanel makeAvgDistrPanel(IELSAIterator it, double maxDist){
    	try{
//            Distribution distr =  distrExtractor.getCachedByLengthDistr(this.nelsa, it.k(), true);
//            distr.convertInFrequency();
//            this.nofKDistrs = (int)distr.getNofDistrInside();
            
            Map<Double,Double> distrValues = getAvgDistribution(maxDist);
            final XYSeries series = new XYSeries("");
            for(Map.Entry<Double,Double> entry : distrValues.entrySet()){
                if(entry.getKey() > maxDist)
                    break;
                series.add(entry.getKey(), entry.getValue());
            }
            ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            chart.getChart().setTitle("|k| avg. distribution");
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    
    private ChartPanel  makeRandomizedDistrPanel(IELSAIterator it, double maxDist){
    	//TODO  set overlapping and nGaps
    	try{
            
            TreeMap<Double,Double> distrValues = RandomMinimalProperRecurrenceDistances.extractDistributionMap(it);
            final XYSeries series = new XYSeries("");
            for(Map.Entry<Double,Double> entry : distrValues.entrySet()){
                if(entry.getKey() > maxDist)
                    break;
                series.add(entry.getKey(), entry.getValue());
            }
            ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            chart.getChart().setTitle("Randomized");
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    
    private ChartPanel makeRawChart(final XYSeries series, final String xLabel, final String yLabel){
            //, final int xSize, final int ySize){
        final XYSeriesCollection dataset = new XYSeriesCollection(series);
        
        final JFreeChart chart = ChartFactory.createXYBarChart(
                                        null, 
                                        xLabel, 
                                        false, 
                                        yLabel, 
                                        dataset, 
                                        PlotOrientation.VERTICAL, 
                                        false, 
                                        true, 
                                        false);
        
        
        /*JFreeChart chart = ChartFactory.createXYStepChart 
                                                ( 
                                                null, 
                                                xLabel, 
                                                yLabel, 
                                                dataset, 
                                                PlotOrientation.VERTICAL, 
                                                true, // legend 
                                                true, // tooltips 
                                                false // urls 
                                                ); 
        */
        
        final ChartPanel chartPanel = new ChartPanel(chart){
            @Override
            public Dimension getPreferredSize() {
                return new Dimension(chartsPanel.getWidth() / nofChartCols,  chartsPanel.getHeight() / nofChartRows);
            }
        };
        
        chartPanel.setMinimumDrawWidth( 0 );
        chartPanel.setMinimumDrawHeight( 0 );
        chartPanel.setMaximumDrawWidth( 1920 );
        chartPanel.setMaximumDrawHeight( 1200 );
        
        //chartPanel.setPreferredSize(center_panel.getPreferredSize());
        chart.setBackgroundPaint(Color.white);
        //chartPanel.setMouseZoomable(false);
        chartPanel.setMouseWheelEnabled(true);
        
        
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        ((XYBarRenderer) plot.getRenderer()).setBarPainter(new StandardXYBarPainter());
        plot.getRenderer().setSeriesPaint( 0, Color.BLUE);
        plot.setDomainPannable(true);
        plot.setRangePannable(true);
        
        plot.getDomainAxis().setAutoTickUnitSelection(true);
        //((NumberAxis)plot.getDomainAxis()).setTickUnit(new NumberTickUnit(0.1));
        //plot.getDomainAxis().setStandardTickUnits(NumberAxis.createStandardTickUnits());
        
        /*
        chart.setBackgroundPaint(Color.WHITE);
        chart.getPlot().setBackgroundPaint(Color.WHITE);
        final XYPlot plot = chart.getXYPlot(); 
        plot.getRenderer().setSeriesPaint(0, Color.BLUE);
        //plot.getDomainAxis().setStandardTickUnits(NumberAxis.createStandardTickUnits());
        //plot.getRenderer().setBarPainter(new StandardXYBarPainter());
        */
        
        return chartPanel;
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Test3Peaks;
    private javax.swing.JPanel chartsPanel;
    private javax.swing.JButton clustersJButton;
    private javax.swing.JCheckBox distances2ExpCheckBox;
    private javax.swing.JCheckBox frequencyCheckBox;
    private javax.swing.JButton goButton;
    private javax.swing.JTextField itTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField kTextField;
    private javax.swing.JTextField maxDistTextField;
    private javax.swing.JCheckBox minimalCheckBox;
    private javax.swing.JButton nextButton;
    private javax.swing.JCheckBox ngapsCheckBox;
    private javax.swing.JCheckBox overlappingCheckBox;
    private javax.swing.JCheckBox peaksCheckBox;
    private javax.swing.JLabel pickLabel;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JCheckBox resampledCheckBox;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JCheckBox showAvgDistrCheckBox;
    private javax.swing.JCheckBox showEstExpCheckBox;
    private javax.swing.JCheckBox showEstFExpCheckBox;
    private javax.swing.JCheckBox showEstGeomCheckBox;
    private javax.swing.JCheckBox showLocationsCheckBox;
    private javax.swing.JButton showPickJButton;
    private javax.swing.JCheckBox showRandomizedCheckBox;
    private javax.swing.JButton startButton;
    private javax.swing.JButton verifyExpRepeatsJButton;
    // End of variables declaration//GEN-END:variables
}
