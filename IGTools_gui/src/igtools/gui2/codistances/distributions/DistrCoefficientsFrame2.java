/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package igtools.gui2.codistances.distributions;

import igtools.analyses.recurrences.carpena.Carpena2009;
import igtools.analyses.toRemove.DistalRecurrence;
import igtools.analyses.toRemove.Distribution;
import igtools.analyses.toRemove.ExtractByDistrComp;
import igtools.common.kmer.b2.unit.B2UnitRLKmer;
import igtools.common.nucleotide.B3Nucleotide;
//import igtools.common.seqdb.FASTASeqsListIterator;
//import igtools.common.seqdb.ISeqsListIterator;
import igtools.common.sequence.B3LLSequence;
import igtools.common.sequence.B3Sequence;
import igtools.dictionaries.elsa.CompleteUnitIterator;
import igtools.dictionaries.elsa.IELSAIterator;
import igtools.dictionaries.elsa.NELSA;
import igtools.gui2.WSSequence;
import igtools.gui2.positions.CoveragePanel;
import igtools.gui2.positions.NCoverageGraphPanel;
import igtools.gui2.positions.PositionsPanel;

import java.awt.Color;
import java.awt.Dimension;
import java.text.DecimalFormat;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.Scrollable;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.entity.XYItemEntity;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.event.PlotChangeListener;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYBarPainter;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author vbonnici
 */
public class DistrCoefficientsFrame2 extends javax.swing.JFrame {

    
    private final DecimalFormat df = new DecimalFormat("###,###,###,###");
    
    private WSSequence wsseq;
    private NELSA nelsa;
    private B3Sequence b3seq;
    
    //private FASTASeqsListIterator seqsIt = null;
    private IELSAIterator nelsaIt = null;
    
    ExtractByDistrComp distrExtractor = null;
    
    
    /**
     * Creates new form FileWordProperties
     */
    public DistrCoefficientsFrame2(WSSequence wsseq) {
        this.wsseq = wsseq;
        this.nelsa = wsseq.getNELSA();
        this.b3seq = wsseq.getB3seq();
        
        distrExtractor = new ExtractByDistrComp(this.wsseq.getB3seq(), this.nelsa);
        
        initComponents();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        increaseButton = new javax.swing.JButton();
        decreaseButton = new javax.swing.JButton();
        pickedPairLabel = new javax.swing.JLabel();
        drawButton = new javax.swing.JButton();
        logyButton = new javax.swing.JToggleButton();
        kCombobox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        centerPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(900, 110));

        increaseButton.setText("+");
        increaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseButtonActionPerformed(evt);
            }
        });

        decreaseButton.setText("-");
        decreaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseButtonActionPerformed(evt);
            }
        });

        pickedPairLabel.setText("jLabel1");

        drawButton.setText("draw");
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });

        logyButton.setText("log Y");
        logyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logyButtonActionPerformed(evt);
            }
        });

        kCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(kCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decreaseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(increaseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 618, Short.MAX_VALUE)
                .addComponent(pickedPairLabel)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drawButton)
                    .addComponent(pickedPairLabel)
                    .addComponent(decreaseButton)
                    .addComponent(increaseButton)
                    .addComponent(logyButton)
                    .addComponent(kCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 500));

        centerPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("white"));
        centerPanel.setLayout(new javax.swing.BoxLayout(centerPanel, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane1.setViewportView(centerPanel);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void increaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseButtonActionPerformed
        try{
            if(kCombobox.getSelectedIndex() < kCombobox.getItemCount()-1)
            kCombobox.setSelectedIndex(kCombobox.getSelectedIndex() + 1);
            makeChart();

        }catch(Exception e){
        }
    }//GEN-LAST:event_increaseButtonActionPerformed

    private void decreaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseButtonActionPerformed
        try{

            if(kCombobox.getSelectedIndex() > 0)
            kCombobox.setSelectedIndex(kCombobox.getSelectedIndex() - 1);
            makeChart();

        }catch(Exception e){
        }
    }//GEN-LAST:event_decreaseButtonActionPerformed

    private void drawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawButtonActionPerformed
        makeChart();
    }//GEN-LAST:event_drawButtonActionPerformed

    private void logyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logyButtonActionPerformed
       
    }//GEN-LAST:event_logyButtonActionPerformed

    
    
    
    
    private void clearChartsPanel(){
        this.centerPanel.removeAll();
        //this.chartsPanel.setBackground(Color.RED);
        this.centerPanel.invalidate();
        this.centerPanel.repaint();
    }
    
    private void forceChartsPanel(){
        this.centerPanel.revalidate();
        this.centerPanel.repaint();
    }
    
    
    public void makeChart(){
        if(this.nelsa != null){
            pickedPairLabel.setText("");
            
            this.setEnabled(false);
            
            
            clearChartsPanel();
            
            
            try{
                final int k = Integer.parseInt(kCombobox.getSelectedItem().toString());
                
                final ExtractByDistrComp ebdc = new ExtractByDistrComp(this.wsseq.getB3seq(), this.nelsa);
                final Carpena2009 carpena = new Carpena2009(this.nelsa);
                
                
                final XYSeries carpenaSigmaSeries = new XYSeries("");
                final XYSeries carpenaCSeries = new XYSeries("");
                final XYSeries byEstSeries = new XYSeries("");
                final XYSeries byMaxEstSeries = new XYSeries("");
                final XYSeries byAverageSeries = new XYSeries("");
                //final XYSeries byRootSeries = new XYSeries("");
                
                
                //final TreeMap<Integer, Double[] > coefficients = new TreeMap<Integer,Double[]>();
                
                final CompleteUnitIterator cit = new CompleteUnitIterator(k);
                double cit_code;
                IELSAIterator it;
                do{
                    //Double[] coeff = {-1.0,-1.0,-1.0,-1.0,-1.0};
                    cit_code = (double)cit.code();
                    it = this.nelsa.find(new B3LLSequence(cit.kmer()));
                    if(it != null){
                        int[] codists = DistalRecurrence.proper_codistances(it);
                        
                        //coeff[0] = carpena.sigma(codists);
                        //coeff[1] = carpena.C(it);
                        
                        carpenaSigmaSeries.add(cit_code, carpena.sigma(codists));
                        carpenaCSeries.add(cit_code, carpena.C(it));
                        
                        Distribution itd = ebdc.getDistribution(it, false);
                        itd.convertInFrequency();
                        
                        Distribution est = ebdc.estimateGeometric(codists);
                        
                        double a2b = ExtractByDistrComp.KullbackLeibler(itd, est);
                        double b2a = ExtractByDistrComp.KullbackLeibler(est, itd);
                        
                        
                        System.out.println(B3Nucleotide.toString(cit.kmer()) +" "+ a2b +" "+b2a);
                        
                        //coeff[2] = a2b;
                        byEstSeries.add(cit_code, a2b);
                        //if(a2b>=b2a) coeff[3] = a2b;
                        //else coeff[3] = b2a;
                        if(a2b>=b2a) byMaxEstSeries.add(cit_code, a2b);
                        else byMaxEstSeries.add(cit_code, b2a);
                        
                        est = null;
                        
                        est = ebdc.getCachedByLengthDistr(this.nelsa, k, false);
                        est.convertInFrequency();
                        
                        //coeff[4] = ExtractByDistrComp.KullbackLeibler(itd, est);
                        byAverageSeries.add(cit_code, ExtractByDistrComp.KullbackLeibler(itd, est));
                        
                        est = null;
                        
                        
                        
                    }
                    else{
                        carpenaSigmaSeries.add(cit_code, -1.0);
                        carpenaCSeries.add(cit_code, -1.0);
                        byEstSeries.add(cit_code, -1.0);
                        byMaxEstSeries.add(cit_code, -1.0);
                        byAverageSeries.add(cit_code, -1.0);
                    }
                    //coefficients.put(cit.code(), coeff);
                    
                }while(cit.next());
                
                
                ebdc.releaseResources();
                
                
                this.centerPanel.add(makeRawChart(carpenaSigmaSeries, "kmers", "sigma", cit.k()));
                this.centerPanel.add(makeRawChart(carpenaCSeries, "kmers", "C", cit.k()));
                this.centerPanel.add(makeRawChart(byEstSeries, "kmers", "est", cit.k()));
                this.centerPanel.add(makeRawChart(byMaxEstSeries, "kmers", "max est", cit.k()));
                this.centerPanel.add(makeRawChart(byAverageSeries, "kmers", "avg", cit.k()));
                
            }catch(Exception e){
               e.printStackTrace();
            }
             
            
            forceChartsPanel();
           
           this.setEnabled(true);
        }
    }
    
    private final int nofChartRows = 5;
    private final int nofChartCols = 1;
    
    private ChartPanel makeRawChart(final XYSeries series, final String xLabel, final String yLabel,int ak){
            //, final int xSize, final int ySize){
        final XYSeriesCollection dataset = new XYSeriesCollection(series);
        
        final JFreeChart chart = ChartFactory.createXYBarChart(
                                        null, 
                                        xLabel, 
                                        false, 
                                        yLabel, 
                                        dataset, 
                                        PlotOrientation.VERTICAL, 
                                        false, 
                                        true, 
                                        false);
        
        
        /*JFreeChart chart = ChartFactory.createXYStepChart 
                                                ( 
                                                null, 
                                                xLabel, 
                                                yLabel, 
                                                dataset, 
                                                PlotOrientation.VERTICAL, 
                                                true, // legend 
                                                true, // tooltips 
                                                false // urls 
                                                ); 
        */
        
        final ChartPanel chartPanel = new ChartPanel(chart){
            @Override
            public Dimension getPreferredSize() {
                return new Dimension(centerPanel.getWidth(),  300);
            }
        };
        
        chartPanel.setMinimumDrawWidth( 0 );
        chartPanel.setMinimumDrawHeight( 300 );
        chartPanel.setMaximumDrawWidth( 1920 );
        chartPanel.setMaximumDrawHeight( 1200 );
        
        //chartPanel.setPreferredSize(center_panel.getPreferredSize());
        chart.setBackgroundPaint(Color.white);
        //chartPanel.setMouseZoomable(false);
        chartPanel.setMouseWheelEnabled(true);
        
        
        final XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        ((XYBarRenderer) plot.getRenderer()).setBarPainter(new StandardXYBarPainter());
        plot.getRenderer().setSeriesPaint( 0, Color.BLUE);
        plot.setDomainPannable(true);
        plot.setRangePannable(true);
        
        //plot.getDomainAxis().setAutoTickUnitSelection(true);


        plot.getDomainAxis().setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        plot.getRangeAxis().setStandardTickUnits(NumberAxis.createStandardTickUnits());

        plot.setDomainPannable(true);
        plot.setRangePannable(true);



        plot.getDomainAxis().setTickLabelPaint(Color.white);
        plot.setRangeGridlinesVisible(true);  
        plot.setRangeGridlinePaint(Color.gray);
        ((XYBarRenderer) plot.getRenderer()).setMargin(0.1);
        
        final int k = ak;

        plot.addChangeListener(new PlotChangeListener() {

            @Override
            public void plotChanged(PlotChangeEvent pce) {
    //                        System.out.println(pce.getClass());

                int first =  (int)Math.floor(plot.getDomainAxis().getRange().getLowerBound() + 0.5d);
                int last =  (int)Math.ceil(plot.getDomainAxis().getRange().getUpperBound() - 0.5d);

    //                        System.out.println("f:"+ first);
    //                        System.out.println("l:" + last);

                if(first < 0)
                    first = 0;
                if(last >= Math.pow(4, k))
                    last = (int) Math.pow(4, k) -1;

    //                        System.out.println("f:"+ first);
    //                        System.out.println("l:" + last);
            }
        });

        ((XYBarRenderer) plot.getRenderer()).setBaseToolTipGenerator(
                new StandardXYToolTipGenerator(){
                        public String generateToolTip(XYDataset dataset, int series, int item){
                            XYSeries xyseries = ((XYSeriesCollection)dataset).getSeries(series);
                            XYDataItem xyItem = xyseries.getDataItem(item);
                            return "" + (new B2UnitRLKmer(xyItem.getX().intValue())).toString(k)+": "+df.format(xyItem.getYValue());
                        }
                     }
                );


        chartPanel.addChartMouseListener(new ChartMouseListener() {

            @Override
            public void chartMouseClicked(ChartMouseEvent cme) {

                Plot p = cme.getChart().getPlot();
                if(p instanceof XYPlot){                    
                    if(cme.getEntity() instanceof XYItemEntity){                        
                        int seriesIndex = ((XYItemEntity)cme.getEntity()).getSeriesIndex();
                        int item = ((XYItemEntity)cme.getEntity()).getItem();
                        XYSeries series = ((XYSeriesCollection)dataset).getSeries(seriesIndex);
                        XYDataItem xyItem = series.getDataItem(item);
                        System.out.println(xyItem);
                        System.out.println(seriesIndex + "\t" + item);
                        System.out.println((new B2UnitRLKmer(xyItem.getX().intValue())));
                        System.out.println(xyItem.getY().doubleValue());

                        //pickedPairLabel.setText((new B2UnitRLKmer(xyItem.getX().intValue())).toString(k)+": "+df.format(xyItem.getYValue()));
                        pickedPairLabel.setText((new B2UnitRLKmer(xyItem.getX().intValue())).toString(k)+": "+df.format(xyItem.getYValue())+": "+xyItem.getY().doubleValue());
                        return;
                    }
                }

                pickedPairLabel.setText("");
            }

            @Override
            public void chartMouseMoved(ChartMouseEvent cme) {
            }

        });
        
        return chartPanel;
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JButton decreaseButton;
    private javax.swing.JButton drawButton;
    private javax.swing.JButton increaseButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox kCombobox;
    private javax.swing.JToggleButton logyButton;
    private javax.swing.JLabel pickedPairLabel;
    // End of variables declaration//GEN-END:variables
}
