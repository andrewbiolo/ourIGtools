/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package igtools.gui2.codistances.distributions;

import igtools.analyses.recurrences.distances.BiAverageDistribution;
import igtools.analyses.recurrences.distances.BiRecurrenceDistancesExtractor;
import igtools.analyses.recurrences.distances.LimitedBiGlobalRecurrenceDistancesExtractor;
import igtools.analyses.recurrences.distances.LimitedProperGlobalRecurrenceDistancesExtractor;
import igtools.analyses.recurrences.distances.ProperAverageDistribution;
import igtools.analyses.recurrences.distances.ProperRecurrenceDistancesExtractor;
import igtools.analyses.toRemove.ExtractByDistrComp;
import igtools.common.distributions.EstimatedDistribution;
import igtools.common.nucleotide.B3Nucleotide;
import igtools.common.sequence.B3LLSequence;
import igtools.dictionaries.elsa.IELSAIterator;
import igtools.dictionaries.elsa.NELSA;
import igtools.gui2.WSSequence;

import java.awt.Color;
import java.awt.Dimension;
import java.io.FileWriter;
import java.text.DecimalFormat;
import java.util.Map;

import javax.swing.BoxLayout;
import javax.swing.JFileChooser;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYBarPainter;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author vbonnici
 */
public class BiEDistalDistributionsFrame extends javax.swing.JFrame {

     private final DecimalFormat df = new DecimalFormat("###,###,###,###");
    
    private WSSequence wsseq;
    private NELSA nelsa;
    
    ExtractByDistrComp distrExtractor = null;
    
    private final int nofChartRows = 4;
    private final int nofChartCols = 1;
    
    private IELSAIterator wordIt_a = null;
    private IELSAIterator wordIt_b = null;
    
    /**
     * Creates new form DistalDistributionsFrame
     */
    public BiEDistalDistributionsFrame(WSSequence wsseq) {
        this.wsseq = wsseq;
        this.nelsa = wsseq.getNELSA();
        
        distrExtractor = new ExtractByDistrComp(this.wsseq.getB3seq(), this.nelsa);
        //distrExtractor.generateRandomSequence();
        
        initComponents();
        this.setTitle("General trends: "+wsseq.getName());
        
        
        //this.chartsPanel.setLayout(new GridLayout(nofChartRows, nofChartCols));
        this.chartsPanel.setLayout(new BoxLayout(this.chartsPanel, BoxLayout.Y_AXIS));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        kTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        it_aTextField = new javax.swing.JTextField();
        it_aPrevButton = new javax.swing.JButton();
        it_aNextButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        it_aGoButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        maxDistTextField = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTextArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        overlappingCheckBox = new javax.swing.JCheckBox();
        ngapsCheckBox = new javax.swing.JCheckBox();
        jSeparator5 = new javax.swing.JSeparator();
        showAvgDistrCheckBox = new javax.swing.JCheckBox();
        showEstGeomCheckBox = new javax.swing.JCheckBox();
        showEstExpCheckBox = new javax.swing.JCheckBox();
        showEstFExpCheckBox = new javax.swing.JCheckBox();
        showLocationsCheckBox = new javax.swing.JCheckBox();
        showRandomizedCheckBox = new javax.swing.JCheckBox();
        minimalCheckBox = new javax.swing.JCheckBox();
        it_bGoButton = new javax.swing.JButton();
        it_bTextField = new javax.swing.JTextField();
        it_bPrevButton = new javax.swing.JButton();
        it_bNextButton = new javax.swing.JButton();
        diagonalCheckBox = new javax.swing.JCheckBox();
        onlySupCheckBox = new javax.swing.JCheckBox();
        chartsPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        kTextField.setText("3");

        jLabel1.setText("k");

        it_aPrevButton.setText("Prev");
        it_aPrevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                it_aPrevButtonActionPerformed(evt);
            }
        });

        it_aNextButton.setText("Next");
        it_aNextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                it_aNextButtonActionPerformed(evt);
            }
        });

        it_aGoButton.setText("go");
        it_aGoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                it_aGoButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("max distance");

        maxDistTextField.setText("2000");

        resultsTextArea.setColumns(20);
        resultsTextArea.setRows(5);
        jScrollPane1.setViewportView(resultsTextArea);

        jButton1.setText("Export");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        overlappingCheckBox.setText("overlapping");

        ngapsCheckBox.setText("allow N gaps");

        showAvgDistrCheckBox.setText("show Avg Distr.");

        showEstGeomCheckBox.setText("show est. Geometric");

        showEstExpCheckBox.setText("show est. Exponential");

        showEstFExpCheckBox.setText("show est. FExponential");

        showLocationsCheckBox.setText("show Locations");
        showLocationsCheckBox.setEnabled(false);

        showRandomizedCheckBox.setText("show randomized Distr.");
        showRandomizedCheckBox.setEnabled(false);

        minimalCheckBox.setSelected(true);
        minimalCheckBox.setText("minimal");

        it_bGoButton.setText("go");
        it_bGoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                it_bGoButtonActionPerformed(evt);
            }
        });

        it_bPrevButton.setText("Prev");
        it_bPrevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                it_bPrevButtonActionPerformed(evt);
            }
        });

        it_bNextButton.setText("Next");
        it_bNextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                it_bNextButtonActionPerformed(evt);
            }
        });

        diagonalCheckBox.setText("diagonal");

        onlySupCheckBox.setSelected(true);
        onlySupCheckBox.setText("only sup");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(it_aTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(4, 4, 4)
                                .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(it_aGoButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(it_aPrevButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(it_aNextButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(startButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refreshButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1))
                            .addComponent(jSeparator4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(maxDistTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jSeparator3)
                            .addComponent(jSeparator5)
                            .addComponent(overlappingCheckBox)
                            .addComponent(ngapsCheckBox)
                            .addComponent(showAvgDistrCheckBox)
                            .addComponent(showEstGeomCheckBox)
                            .addComponent(showEstExpCheckBox)
                            .addComponent(showEstFExpCheckBox)
                            .addComponent(showLocationsCheckBox)
                            .addComponent(showRandomizedCheckBox)
                            .addComponent(minimalCheckBox)
                            .addComponent(it_bTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(it_bGoButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(it_bPrevButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(it_bNextButton)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(onlySupCheckBox)
                            .addComponent(diagonalCheckBox))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(refreshButton)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(it_aTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(it_aPrevButton)
                    .addComponent(it_aNextButton)
                    .addComponent(it_aGoButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(it_bTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(it_bPrevButton)
                    .addComponent(it_bNextButton)
                    .addComponent(it_bGoButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxDistTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(minimalCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(overlappingCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ngapsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showAvgDistrCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(diagonalCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(onlySupCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showEstGeomCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showEstExpCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showEstFExpCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showRandomizedCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showLocationsCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        chartsPanel.setBackground(new java.awt.Color(254, 254, 254));

        javax.swing.GroupLayout chartsPanelLayout = new javax.swing.GroupLayout(chartsPanel);
        chartsPanel.setLayout(chartsPanelLayout);
        chartsPanelLayout.setHorizontalGroup(
            chartsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1327, Short.MAX_VALUE)
        );
        chartsPanelLayout.setVerticalGroup(
            chartsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 771, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(chartsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        try{
            clearChartsPanel();
            int k = Integer.parseInt(this.kTextField.getText());
            wordIt_a = nelsa.begin(k);
            if(wordIt_a.next()){
                wordIt_b = wordIt_a.clone();
                
                this.it_aTextField.setText(B3Nucleotide.toString(wordIt_a.kmer()));
                this.it_bTextField.setText(B3Nucleotide.toString(wordIt_b.kmer()));
                
                makeCharts();
            }
            else{
                wordIt_a = null;
                wordIt_b = null;
            }
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        makeCharts();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void it_aGoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_it_aGoButtonActionPerformed
        try{
            this.setEnabled(false);
            clearChartsPanel();
            
            wordIt_a = nelsa.find(new B3LLSequence(this.it_aTextField.getText()));
            if(wordIt_a != null){
                this.kTextField.setText(""+wordIt_a.k());
                
                //int k = wordIt_a.k();
                //wordIt_b = nelsa.begin(k);
                //wordIt_b.next();
                wordIt_b = wordIt_a.clone();
                this.it_bTextField.setText(B3Nucleotide.toString(wordIt_b.kmer()));
                
                makeCharts();
            }
            
        }catch(Exception e){
            
        }
        this.setEnabled(true);
    }//GEN-LAST:event_it_aGoButtonActionPerformed

    private void it_aPrevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_it_aPrevButtonActionPerformed
        try{
            if(wordIt_a != null && wordIt_a.hasPrev()){
                wordIt_a.prev();
                this.it_aTextField.setText(B3Nucleotide.toString(wordIt_a.kmer()));
                
                //int k = wordIt_a.k();
                //wordIt_b = nelsa.begin(k);
                //wordIt_b.next();
                wordIt_b = wordIt_a.clone();
                this.it_bTextField.setText(B3Nucleotide.toString(wordIt_b.kmer()));
                
                
                makeCharts();
            }
        }catch(Exception e){}
    }//GEN-LAST:event_it_aPrevButtonActionPerformed

    private void it_aNextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_it_aNextButtonActionPerformed
        try{
            if(wordIt_a != null && wordIt_a.hasNext()){
                wordIt_a.next();
                this.it_aTextField.setText(B3Nucleotide.toString(wordIt_a.kmer()));
                
                //int k = wordIt_a.k();
                //wordIt_b = nelsa.begin(k);
                //wordIt_b.next();
                wordIt_b = wordIt_a.clone();
                this.it_bTextField.setText(B3Nucleotide.toString(wordIt_b.kmer()));
                
                makeCharts();
            }
        }catch(Exception e){}
    }//GEN-LAST:event_it_aNextButtonActionPerformed

    
    /**
     * Export 
     * 
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(this.wordIt_a != null){
            /*JFileChooser chooser = new JFileChooser();
            chooser.setMultiSelectionEnabled(false);
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int returnVal = chooser.showOpenDialog(this);
            if(returnVal == JFileChooser.APPROVE_OPTION) {
                try{
                    double[][] distr = BiMinimalRecurrenceExtractor.factory(this.overlappingCheckBox.isSelected(), !this.ngapsCheckBox.isSelected()).recurrenceDistanceDistribution(wordIt_a);
                    if(distr.length > 0){
                    
                        FileWriter printer = new FileWriter(chooser.getSelectedFile(), false);

                        printer.write(distr[0][0]+" "+distr[0][1]+"\n");
                        for(int i=1; i<distr.length; i++){
                            for(double j=distr[i-1][0]; j<distr[i][0]; j++)
                                printer.write(j+" 0.0"+"\n");
                            printer.write(distr[i][0]+" "+distr[i][1]+"\n");
                        }
                        
                        printer.flush();
                        printer.close();
                    }
                }catch(Exception e){
                    e.printStackTrace();
                    System.out.println(e);
                }
            }*/
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void it_bGoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_it_bGoButtonActionPerformed
        try{
            this.setEnabled(false);
            clearChartsPanel();
            
            wordIt_b = nelsa.find(new B3LLSequence(this.it_bTextField.getText()));
            if(wordIt_b != null){
                //this.it_bTextField.setText(""+wordIt_b.k());
                makeCharts();
            }
            
        }catch(Exception e){
            
        }
        this.setEnabled(true);
    }//GEN-LAST:event_it_bGoButtonActionPerformed

    private void it_bPrevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_it_bPrevButtonActionPerformed
       try{
            if(wordIt_b != null && wordIt_b.hasPrev()){
                wordIt_b.prev();
                this.it_bTextField.setText(B3Nucleotide.toString(wordIt_b.kmer()));
                makeCharts();
            }
        }catch(Exception e){}
    }//GEN-LAST:event_it_bPrevButtonActionPerformed

    private void it_bNextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_it_bNextButtonActionPerformed
        try{
            if(wordIt_b != null && wordIt_b.hasNext()){
                wordIt_b.next();
                this.it_bTextField.setText(B3Nucleotide.toString(wordIt_b.kmer()));
                makeCharts();
            }
        }catch(Exception e){}
    }//GEN-LAST:event_it_bNextButtonActionPerformed

    
    private void clearChartsPanel(){
        this.chartsPanel.removeAll();
        //this.chartsPanel.setBackground(Color.RED);
        this.chartsPanel.invalidate();
        this.chartsPanel.repaint();
    }
    
    private void forceChartsPanel(){
        this.chartsPanel.revalidate();
        this.chartsPanel.repaint();
    }
    
    
    private void makeCharts(){
       
        try{
            
            clearChartsPanel();
             this.resultsTextArea.setText("");
            
            Double maxDist = Double.POSITIVE_INFINITY;
            try{
                if(this.maxDistTextField.getText().trim().length() == 0)
                    maxDist = Double.POSITIVE_INFINITY;
                else
                    maxDist = Double.parseDouble(this.maxDistTextField.getText());
           
            }catch(Exception e){
                maxDist = Double.POSITIVE_INFINITY;
            };

            
            
            ChartPanel rawWordDistr = makeDistalDistrChart(maxDist);
            this.chartsPanel.add(rawWordDistr);
           
            
            
            if(this.showAvgDistrCheckBox.isSelected()){
            	ChartPanel pp = makeAvgDistrPanel(
            			wordIt_a, maxDist);
                this.chartsPanel.add(pp);
            }
            
            if(this.showEstGeomCheckBox.isSelected()){
            	ChartPanel pp = makeEstDistrPanel(
            			maxDist, 
            			new EstimatedDistribution.GeometricBased(), 
            			"Geometric");
                this.chartsPanel.add(pp);
            }
            
            if(this.showEstExpCheckBox.isSelected()){
            	ChartPanel pp = makeEstDistrPanel(
            			maxDist, 
            			new EstimatedDistribution.ExponentialBased(), 
            			"Exponential");
                this.chartsPanel.add(pp);
            }
            
            if(this.showEstFExpCheckBox.isSelected()){
            	ChartPanel pp = makeEstDistrPanel(
            			maxDist, 
            			new EstimatedDistribution.FExponentialBased(), 
            			"Flanagan Exponential");
                this.chartsPanel.add(pp);
            }
            
            /*
            if(this.showRandomizedCheckBox.isSelected()){
            	ChartPanel pp = makeRandomizedDistrPanel(wordIt_a, maxDist);
            	this.chartsPanel.add(pp);
            }
            
            if(this.showLocationsCheckBox.isSelected()){
            	JPanel posistionsPanels = new PositionsPanel(this.wsseq, wordIt_a.positions());
                this.chartsPanel.add(posistionsPanels);
            }
            */
            
            
            forceChartsPanel();
            
           
            this.resultsTextArea.append("Multiplicity of "+ B3Nucleotide.toString(wordIt_a.kmer())+" "+ df.format(wordIt_a.multiplicity()) +"\n");
            this.resultsTextArea.append("Multiplicity of "+ B3Nucleotide.toString(wordIt_b.kmer())+" "+ df.format(wordIt_b.multiplicity()) +"\n");            
        
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
    }
    
    
    private double[][] getWordDistribution(Double maxDist){
    	if(this.minimalCheckBox.isSelected()){
	    	if(wordIt_a.compare(wordIt_b) == 0){
	    		return ProperRecurrenceDistancesExtractor.factory(
	    					true, 
	    					this.overlappingCheckBox.isSelected(), 
	    					!this.ngapsCheckBox.isSelected())
	    				.recurrenceDistanceDistribution(wordIt_a);
	    	}
	    	else{
	    		return  BiRecurrenceDistancesExtractor.factory(
	    					true, 
	    					this.overlappingCheckBox.isSelected(), 
	    					!this.ngapsCheckBox.isSelected())
	    				.recurrenceDistanceDistribution(wordIt_a, wordIt_b);
	    	}
    	}
    	else{
    		//global
    		if(wordIt_a.compare(wordIt_b) == 0){
    			if( maxDist!=Double.POSITIVE_INFINITY){
		    		System.out.println("limited global recurrences "+maxDist);
		    		LimitedProperGlobalRecurrenceDistancesExtractor lpgre = 
		    				LimitedProperGlobalRecurrenceDistancesExtractor.factory(this.overlappingCheckBox.isSelected(), !this.ngapsCheckBox.isSelected());
		    		lpgre.setMaxDist(maxDist);
		    		return lpgre.recurrenceDistanceDistribution(wordIt_a);
		    	}
		    	else{
		    		return 
		    		ProperRecurrenceDistancesExtractor.factory(
		    				false, 
		    				this.overlappingCheckBox.isSelected(), 
		    				!this.ngapsCheckBox.isSelected()).recurrenceDistanceDistribution(wordIt_a);
		    	}
    		}
    		else{
    			if( maxDist!=Double.POSITIVE_INFINITY){
		    		System.out.println("limited global recurrences "+maxDist);
		    		LimitedBiGlobalRecurrenceDistancesExtractor lpgre = 
		    				LimitedBiGlobalRecurrenceDistancesExtractor.factory(this.overlappingCheckBox.isSelected(), !this.ngapsCheckBox.isSelected());
		    		lpgre.setMaxDistance(maxDist);
		    		return lpgre.recurrenceDistanceDistribution(wordIt_a, wordIt_b);
		    	}
		    	else{
		    		return 
		    		BiRecurrenceDistancesExtractor.factory(
		    				false, 
		    				this.overlappingCheckBox.isSelected(), 
		    				!this.ngapsCheckBox.isSelected()).recurrenceDistanceDistribution(wordIt_a, wordIt_b);
		    	}
    		}
    	}
    }
    
    private ChartPanel makeDistalDistrChart(Double maxDist){
        try{
            
            //double[][] distr = getRecurrenceExtractor().recurrenceDistanceDistribution(wordIt_a, wordIt_b);
        	double[][] distr = getWordDistribution(maxDist);
            
            final XYSeries series = new XYSeries("");
            if(distr.length > 0){
                double sum = 0.0;
				for(int i=0; i<distr.length; i++)
					sum += distr[i][1];
                
                double dp = 0.0;
                
                for(int i=1; i<distr.length; i++){
                    if(distr[i][0] > maxDist)
                        break;
                    for(double j=dp; j<distr[i][0] && j<maxDist; j++)
                        series.add(j,0.0);
                    series.add(distr[i][0], distr[i][1] / sum);
                    dp = distr[i][0];
                }
            }
            
            ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            chart.getChart().setTitle("Words Recurrence Distance Distribution");
            
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    
    
    
    private ChartPanel makeEstDistrPanel(double maxDist, EstimatedDistribution edistr, String pName){
    	try{
	    	//double[][] distr = getRecurrenceExtractor().recurrenceDistanceDistribution(wordIt_a, wordIt_b);
    		double[][] distr = getWordDistribution(maxDist);
	    	
	    	final XYSeries series = new XYSeries("");
	        
	    	if(distr.length > 0){
	    		try{
	                edistr.estimateDistrParameter(distr);
	                
	                double dp = 0.0;
	                
	                for(int i=1; i<distr.length; i++){
	                    if(distr[i][0] > maxDist)
	                        break;
	                    
	                    for(double j=dp; j<distr[i][0] && j<maxDist; j++)
	                        series.add(j, edistr.getValue(j));
	                        //series.add(j, 0.0);
	                    series.add(distr[i][0], edistr.getValue(distr[i][0]));
	                    
	                    dp = distr[i][0];
	                }
                }catch(Exception e){
                	System.out.println(e);
                }
	        }
	        
	        ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            chart.getChart().setTitle(pName);
            return chart;
	        
    	}catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    
    private BiAverageDistribution pad = null;
    
    private boolean pMinimal = true;
    private Double pMaxDist = Double.POSITIVE_INFINITY;
    private boolean pOverlap = false;
    private boolean pGaps = false;
    private int pk_a = 0;
    private int pk_b = 0;
    private boolean pDiagonal = false;
    private boolean pOnlysup = false;
    
    private Map<Double,Double> getAvgDistribution(Double maxDist){
    	
    	System.out.println(pad == null);
    	System.out.println(pMinimal != this.minimalCheckBox.isSelected()); 
		//System.out.println(pMaxDist != maxDist); System.out.println(pMaxDist +" "+maxDist);//TODO
		System.out.println(pOverlap != this.overlappingCheckBox.isSelected());
		System.out.println(pGaps != this.ngapsCheckBox.isSelected());
		System.out.println(pk_a != wordIt_a.k());
		System.out.println(pk_b != wordIt_b.k());
		System.out.println(pDiagonal != this.diagonalCheckBox.isSelected());
		System.out.println(pOnlysup != this.onlySupCheckBox.isSelected());
    	
		if(		pad == null ||
				pMinimal != this.minimalCheckBox.isSelected() || 
				//pMaxDist != maxDist ||//TODO
				pOverlap != this.overlappingCheckBox.isSelected() ||
				pGaps != this.ngapsCheckBox.isSelected() ||
				pk_a != wordIt_a.k() ||
				pk_b != wordIt_b.k() ||
				pDiagonal != this.diagonalCheckBox.isSelected() ||
				pOnlysup != this.onlySupCheckBox.isSelected()
				){
			System.out.println("reaveraging");
			pad = null;
			
			BiRecurrenceDistancesExtractor extractor;
			
			if(this.minimalCheckBox.isSelected()){
				extractor = 
						BiRecurrenceDistancesExtractor.factory(
								true, 
								this.overlappingCheckBox.isSelected(), 
								!this.ngapsCheckBox.isSelected());
			}
			else{
				extractor = LimitedBiGlobalRecurrenceDistancesExtractor.factory(this.overlappingCheckBox.isSelected(), !this.ngapsCheckBox.isSelected());
	    		((LimitedBiGlobalRecurrenceDistancesExtractor)extractor).setMaxDistance(maxDist);
			}
			
			pad = new BiAverageDistribution(nelsa, extractor, this.diagonalCheckBox.isSelected(), this.onlySupCheckBox.isSelected());
		}
		
		pMinimal = this.minimalCheckBox.isSelected();
		pMaxDist = maxDist;
    	pOverlap = this.overlappingCheckBox.isSelected();
    	pGaps = this.ngapsCheckBox.isSelected();
    	pk_a = wordIt_a.k();
    	pk_b = wordIt_b.k();
    	pDiagonal = this.diagonalCheckBox.isSelected();
		pOnlysup = this.onlySupCheckBox.isSelected();
    	
    	return pad.getCachedAvgDistribution(wordIt_a.k());
    }
    
    private ChartPanel makeAvgDistrPanel(IELSAIterator it, double maxDist){
    	try{
    		Map<Double,Double> distrValues = getAvgDistribution(maxDist);
            final XYSeries series = new XYSeries("");
            for(Map.Entry<Double,Double> entry : distrValues.entrySet()){
                if(entry.getKey() > maxDist)
                    break;
                series.add(entry.getKey(), entry.getValue());
            }
            ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            chart.getChart().setTitle("|k| avg. distribution");
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    
    private ChartPanel  makeRandomizedDistrPanel(IELSAIterator it, double maxDist){
    	//TODO  set overlapping and nGaps
    	/*try{
            
            TreeMap<Double,Double> distrValues = RandomMinimalProperRecurrence.extractDistributionMap(it);
            final XYSeries series = new XYSeries("");
            for(Map.Entry<Double,Double> entry : distrValues.entrySet()){
                if(entry.getKey() > maxDist)
                    break;
                series.add(entry.getKey(), entry.getValue());
            }
            ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            chart.getChart().setTitle("Randomized");
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }*/
        return null;
    }
    
    
    private ChartPanel makeRawChart(final XYSeries series, final String xLabel, final String yLabel){
            //, final int xSize, final int ySize){
        final XYSeriesCollection dataset = new XYSeriesCollection(series);
        
        final JFreeChart chart = ChartFactory.createXYBarChart(
                                        null, 
                                        xLabel, 
                                        false, 
                                        yLabel, 
                                        dataset, 
                                        PlotOrientation.VERTICAL, 
                                        false, 
                                        true, 
                                        false);
        
        
        /*JFreeChart chart = ChartFactory.createXYStepChart 
                                                ( 
                                                null, 
                                                xLabel, 
                                                yLabel, 
                                                dataset, 
                                                PlotOrientation.VERTICAL, 
                                                true, // legend 
                                                true, // tooltips 
                                                false // urls 
                                                ); 
        */
        
        final ChartPanel chartPanel = new ChartPanel(chart){
            @Override
            public Dimension getPreferredSize() {
                return new Dimension(chartsPanel.getWidth() / nofChartCols,  chartsPanel.getHeight() / nofChartRows);
            }
        };
        
        chartPanel.setMinimumDrawWidth( 0 );
        chartPanel.setMinimumDrawHeight( 0 );
        chartPanel.setMaximumDrawWidth( 1920 );
        chartPanel.setMaximumDrawHeight( 1200 );
        
        //chartPanel.setPreferredSize(center_panel.getPreferredSize());
        chart.setBackgroundPaint(Color.white);
        //chartPanel.setMouseZoomable(false);
        chartPanel.setMouseWheelEnabled(true);
        
        
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        ((XYBarRenderer) plot.getRenderer()).setBarPainter(new StandardXYBarPainter());
        plot.getRenderer().setSeriesPaint( 0, Color.BLUE);
        plot.setDomainPannable(true);
        plot.setRangePannable(true);
        
        plot.getDomainAxis().setAutoTickUnitSelection(true);
        //((NumberAxis)plot.getDomainAxis()).setTickUnit(new NumberTickUnit(0.1));
        //plot.getDomainAxis().setStandardTickUnits(NumberAxis.createStandardTickUnits());
        
        /*
        chart.setBackgroundPaint(Color.WHITE);
        chart.getPlot().setBackgroundPaint(Color.WHITE);
        final XYPlot plot = chart.getXYPlot(); 
        plot.getRenderer().setSeriesPaint(0, Color.BLUE);
        //plot.getDomainAxis().setStandardTickUnits(NumberAxis.createStandardTickUnits());
        //plot.getRenderer().setBarPainter(new StandardXYBarPainter());
        */
        
        return chartPanel;
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel chartsPanel;
    private javax.swing.JCheckBox diagonalCheckBox;
    private javax.swing.JButton it_aGoButton;
    private javax.swing.JButton it_aNextButton;
    private javax.swing.JButton it_aPrevButton;
    private javax.swing.JTextField it_aTextField;
    private javax.swing.JButton it_bGoButton;
    private javax.swing.JButton it_bNextButton;
    private javax.swing.JButton it_bPrevButton;
    private javax.swing.JTextField it_bTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField kTextField;
    private javax.swing.JTextField maxDistTextField;
    private javax.swing.JCheckBox minimalCheckBox;
    private javax.swing.JCheckBox ngapsCheckBox;
    private javax.swing.JCheckBox onlySupCheckBox;
    private javax.swing.JCheckBox overlappingCheckBox;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextArea resultsTextArea;
    private javax.swing.JCheckBox showAvgDistrCheckBox;
    private javax.swing.JCheckBox showEstExpCheckBox;
    private javax.swing.JCheckBox showEstFExpCheckBox;
    private javax.swing.JCheckBox showEstGeomCheckBox;
    private javax.swing.JCheckBox showLocationsCheckBox;
    private javax.swing.JCheckBox showRandomizedCheckBox;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
}
