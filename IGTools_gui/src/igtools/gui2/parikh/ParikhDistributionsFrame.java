/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package igtools.gui2.parikh;

import igtools.analyses.parikh.ParikhClasses;
import igtools.analyses.parikh.ParikhClasses.PClassStats;
import igtools.charts.palette.BlueB3NucleotidePalette;
import igtools.common.nucleotide.B3Nucleotide;
import igtools.common.util.Maths;
import igtools.common.util.Vector4Int;
import igtools.common.util.Vector4IntAComp;
import igtools.dictionaries.elsa.IELSAIterator;
import igtools.dictionaries.elsa.NELSA;
import igtools.gui2.WSSequence;
import java.awt.Color;
import java.text.DecimalFormat;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.BoxLayout;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.entity.CategoryItemEntity;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author vbonnici
 */
public class ParikhDistributionsFrame extends javax.swing.JFrame {

    
    private DecimalFormat df = new DecimalFormat("###,###,###,###.#######");
    private WSSequence wsseq;
    private NELSA nelsa;
    
    
    
    /**
     * Creates new form ParikhDistributionsFrame
     */
    public ParikhDistributionsFrame(WSSequence wsseq) {
        this.wsseq = wsseq;
        this.nelsa = wsseq.getNELSA();
        
        initComponents();
        this.setTitle("Distribution ceofficients: " + wsseq.getName());
        
        this.chartPanel.setLayout(new BoxLayout(this.chartPanel, BoxLayout.Y_AXIS));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        ControlPanel = new javax.swing.JPanel();
        kTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        drawButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        kmerAxis = new javax.swing.JRadioButton();
        pairkhAxis = new javax.swing.JRadioButton();
        jSeparator3 = new javax.swing.JSeparator();
        showKmers = new javax.swing.JCheckBox();
        showRatio = new javax.swing.JCheckBox();
        showMultiplicity = new javax.swing.JCheckBox();
        showCoverage = new javax.swing.JCheckBox();
        jSeparator4 = new javax.swing.JSeparator();
        nofClassesLabel = new javax.swing.JLabel();
        orderTsupCheckBox = new javax.swing.JCheckBox();
        showAnagrams = new javax.swing.JCheckBox();
        chartPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        kTextField.setText("1");

        jLabel1.setText("k");

        prevButton.setText("Prev");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        drawButton.setText("Draw");
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(kmerAxis);
        kmerAxis.setText("k-mers");

        buttonGroup1.add(pairkhAxis);
        pairkhAxis.setSelected(true);
        pairkhAxis.setText("Parikh classes");

        showKmers.setSelected(true);
        showKmers.setText("Class k-mers");

        showRatio.setSelected(true);
        showRatio.setText("Class ratio");

        showMultiplicity.setSelected(true);
        showMultiplicity.setText("Class multiplicity");

        showCoverage.setText("Class coverage");

        nofClassesLabel.setText("Nof classes");

        orderTsupCheckBox.setText("Order by Tsup");

        showAnagrams.setText("Class Anagrams");

        javax.swing.GroupLayout ControlPanelLayout = new javax.swing.GroupLayout(ControlPanel);
        ControlPanel.setLayout(ControlPanelLayout);
        ControlPanelLayout.setHorizontalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(drawButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator4)
                    .addGroup(ControlPanelLayout.createSequentialGroup()
                        .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ControlPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(7, 7, 7)
                                .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(prevButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nextButton))
                            .addComponent(kmerAxis)
                            .addComponent(pairkhAxis)
                            .addComponent(orderTsupCheckBox)
                            .addComponent(showKmers)
                            .addComponent(showAnagrams)
                            .addComponent(showRatio)
                            .addComponent(showMultiplicity)
                            .addComponent(showCoverage)
                            .addComponent(nofClassesLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        ControlPanelLayout.setVerticalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(kTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(prevButton)
                    .addComponent(nextButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kmerAxis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pairkhAxis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderTsupCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showKmers)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showAnagrams)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showRatio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showMultiplicity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showCoverage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nofClassesLabel)
                .addContainerGap(138, Short.MAX_VALUE))
        );

        getContentPane().add(ControlPanel, java.awt.BorderLayout.LINE_START);

        chartPanel.setBackground(java.awt.Color.white);

        javax.swing.GroupLayout chartPanelLayout = new javax.swing.GroupLayout(chartPanel);
        chartPanel.setLayout(chartPanelLayout);
        chartPanelLayout.setHorizontalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 656, Short.MAX_VALUE)
        );
        chartPanelLayout.setVerticalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 541, Short.MAX_VALUE)
        );

        getContentPane().add(chartPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        try{
            Integer k = Integer.parseInt(this.kTextField.getText());
            if(k>0){
                k = k-1;
                this.kTextField.setText(k.toString());
                draw();
            }
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        try{
            Integer k = Integer.parseInt(this.kTextField.getText());
            k = k+1;
            this.kTextField.setText(k.toString());
            draw();
        }catch(Exception e){
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void drawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawButtonActionPerformed
        draw();
    }//GEN-LAST:event_drawButtonActionPerformed

    
    
    
    private void clearChartPanel(){
        this.chartPanel.removeAll();
        //this.chartsPanel.setBackground(Color.RED);
        this.chartPanel.invalidate();
        this.chartPanel.repaint();
    }
    
    private void forceChartPanel(){
        this.chartPanel.revalidate();
        this.chartPanel.repaint();
    }
    
    private void draw(){
        clearChartPanel();
        this.nofClassesLabel.setText("Nof classes");
        try{
            
            Integer k = Integer.parseInt(this.kTextField.getText());
            
            Map<Vector4Int, PClassStats> pStats = null;
            if(this.orderTsupCheckBox.isSelected())
            	pStats = new TreeMap<Vector4Int, PClassStats>(new Vector4IntAComp());
            else
            	pStats = new TreeMap<Vector4Int, PClassStats>();
            
            ParikhClasses.parikhAnalysis(nelsa, k, pStats, this.showCoverage.isSelected());
            this.nofClassesLabel.setText(""+pStats.size());
            
            
            
            if(this.pairkhAxis.isSelected()){
                if(this.showKmers.isSelected()){
                    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                    for(Map.Entry<Vector4Int, PClassStats> entry : pStats.entrySet()){
                        dataset.addValue(entry.getValue().nofKmers,"series1", entry.getKey());
                    }
                    ChartPanel cp =  rawChart("Class k-mers", "Parikh classes", "Nof k-mers", dataset);
                    this.chartPanel.add(cp);
                }
                if(this.showAnagrams.isSelected()){
                    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                    for(Vector4Int entry : pStats.keySet()){
                        dataset.addValue((int)Maths.nof4Anagrams(entry.values),"series1", entry);
                    }
                    ChartPanel cp =  rawChart("Class anagrams", "Parikh classes", "Nof k-mers", dataset);
                    this.chartPanel.add(cp);
                }
                if(this.showMultiplicity.isSelected()){
                    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                    for(Map.Entry<Vector4Int, PClassStats> entry : pStats.entrySet()){
                        dataset.addValue(entry.getValue().totMultiplicity,"series1", entry.getKey());
                    }
                    ChartPanel cp =  rawChart("Class Multiplicity", "Parikh classes", "Multiplicity", dataset);
                    this.chartPanel.add(cp);
                }
                if(this.showRatio.isSelected()){
                    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                    for(Map.Entry<Vector4Int, PClassStats> entry : pStats.entrySet()){
                        dataset.addValue(entry.getValue().tRatio,"series1", entry.getKey());
                    }
                    ChartPanel cp =  rawChart("Class TRatio", "Parikh classes", "Ratio", dataset);
                    this.chartPanel.add(cp);
                }
                if(this.showCoverage.isSelected()){
                    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                    for(Map.Entry<Vector4Int, PClassStats> entry : pStats.entrySet()){
                        dataset.addValue(entry.getValue().seqCoverage,"series1", entry.getKey());
                    }
                    ChartPanel cp1 =  rawChart("Class Sequence Coverage", "Parikh classes", "Coverage", dataset);
                    this.chartPanel.add(cp1);
                    
                    DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();
                    for(Map.Entry<Vector4Int, PClassStats> entry : pStats.entrySet()){
                        dataset.addValue(entry.getValue().punctualCoverageAvg,"series1", entry.getKey());
                    }
                    ChartPanel cp2 =  rawChart("Class Punctual Coverage", "Parikh classes", "Coverage", dataset2);
                    this.chartPanel.add(cp2);
                }
                
            }
            else{
                if(this.showKmers.isSelected()){
                    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                    
                    Vector4Int s_vect = new Vector4Int();
                    B3Nucleotide[] kmer = new B3Nucleotide[k];
                    PClassStats cs;

                    IELSAIterator it = nelsa.begin(k);
                    while(it.next()){
                        it.kmer(kmer);
                        igtools.common.util.Parikh.getParikh(kmer, s_vect);
                        cs = pStats.get(s_vect);
                         dataset.addValue(cs.nofKmers,"series1", B3Nucleotide.toString(kmer) +" "+ s_vect);
                    }
                    
                    ChartPanel cp =  rawChart("Class k-mers", "k-mers", "Nof class k-mers", dataset);
                    this.chartPanel.add(cp);
                }
                if(this.showMultiplicity.isSelected()){
                    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                    
                    Vector4Int s_vect = new Vector4Int();
                    B3Nucleotide[] kmer = new B3Nucleotide[k];
                    PClassStats cs;

                    IELSAIterator it = nelsa.begin(k);
                    while(it.next()){
                        it.kmer(kmer);
                        igtools.common.util.Parikh.getParikh(kmer, s_vect);
                        cs = pStats.get(s_vect);
                         dataset.addValue(cs.totMultiplicity,"series1", B3Nucleotide.toString(kmer) +" "+ s_vect);
                    }
                    
                    ChartPanel cp =  rawChart("Class Multiplcity", "k-mers", "Class Multiplicity", dataset);
                    this.chartPanel.add(cp);
                }
                if(this.showRatio.isSelected()){
                    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
                    
                    Vector4Int s_vect = new Vector4Int();
                    B3Nucleotide[] kmer = new B3Nucleotide[k];
                    PClassStats cs;

                    IELSAIterator it = nelsa.begin(k);
                    while(it.next()){
                        it.kmer(kmer);
                        igtools.common.util.Parikh.getParikh(kmer, s_vect);
                        cs = pStats.get(s_vect);
                        dataset.addValue(cs.tRatio,"series1", B3Nucleotide.toString(kmer) +" "+ s_vect);
                    }
                    
                    ChartPanel cp =  rawChart("Class Ratio", "k-mers", "Class ratio", dataset);
                    this.chartPanel.add(cp);
                }
                if(this.showCoverage.isSelected()){
                    DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();
                    
                    Vector4Int s_vect = new Vector4Int();
                    B3Nucleotide[] kmer = new B3Nucleotide[k];
                    PClassStats cs;

                    IELSAIterator it = nelsa.begin(k);
                    while(it.next()){
                        it.kmer(kmer);
                        igtools.common.util.Parikh.getParikh(kmer, s_vect);
                        cs = pStats.get(s_vect);
                         dataset1.addValue(cs.seqCoverage,"series1", B3Nucleotide.toString(kmer) +" "+ s_vect);
                    }
                    
                    ChartPanel cp1 =  rawChart("Class Sequence Coverage", "k-mers", "Coverage", dataset1);
                    this.chartPanel.add(cp1);
                    
                    DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();
                    it = nelsa.begin(k);
                    while(it.next()){
                        it.kmer(kmer);
                        igtools.common.util.Parikh.getParikh(kmer, s_vect);
                        cs = pStats.get(s_vect);
                        dataset2.addValue(cs.punctualCoverageAvg,"series1", B3Nucleotide.toString(kmer) +" "+ s_vect);
                    }
                    
                    ChartPanel cp2 =  rawChart("Class Punctual Coverage", "k-mers", "Coverage", dataset2);
                    this.chartPanel.add(cp2);
                }
            }

        }catch(Exception e){
            e.printStackTrace();
            System.err.println(e);
        }
        
        forceChartPanel();
    }
    
    
    
    
    
    private ChartPanel rawChart(
            String title,
            String xName,
            String yName,
            DefaultCategoryDataset dataset
            ){
        
        //DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        //dataset.addValue(entry.getValue(),"series1", entry.getKey());
        final JFreeChart chart = ChartFactory.createBarChart(
                title,         // chart title
                xName,               // domain axis label
                yName,                  // range axis label
                dataset,                  // data
                PlotOrientation.VERTICAL, // orientation
                false,                     // include legend
                true,                     // tooltips?
                false                     // URLs?
            );
        final ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(this.chartPanel.getPreferredSize());
        chart.setBackgroundPaint(Color.white);
//                //chartPanel.setMouseZoomable(false);
        chartPanel.setMouseWheelEnabled(true);

        chartPanel.setMinimumDrawWidth( 0 );
        chartPanel.setMinimumDrawHeight( 0 );
        chartPanel.setMaximumDrawWidth( 1920 );
        chartPanel.setMaximumDrawHeight( 1200 );

        final CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(Color.white);
        ((BarRenderer)plot.getRenderer()).setBarPainter(new StandardBarPainter());

        // set the range axis to display integers only...
        //final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        // disable bar outlines...
        //final BarRenderer renderer = (BarRenderer) plot.getRenderer();
        //plot.setRangePannable(true);
        plot.setRangeGridlinesVisible(true);  
        plot.setRangeGridlinePaint(Color.gray);  
        
        return chartPanel;
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ControlPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel chartPanel;
    private javax.swing.JButton drawButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTextField kTextField;
    private javax.swing.JRadioButton kmerAxis;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel nofClassesLabel;
    private javax.swing.JCheckBox orderTsupCheckBox;
    private javax.swing.JRadioButton pairkhAxis;
    private javax.swing.JButton prevButton;
    private javax.swing.JCheckBox showAnagrams;
    private javax.swing.JCheckBox showCoverage;
    private javax.swing.JCheckBox showKmers;
    private javax.swing.JCheckBox showMultiplicity;
    private javax.swing.JCheckBox showRatio;
    // End of variables declaration//GEN-END:variables
}
