/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package igtools.gui2.mults;

import igtools.common.nucleotide.B3Nucleotide;
import igtools.common.sequence.B3LLSequence;
import igtools.dictionaries.elsa.CompleteUnitIterator;
import igtools.dictionaries.elsa.IELSAIterator;
import igtools.dictionaries.elsa.NELSA;
import igtools.gui2.WSSequence;
import java.awt.BorderLayout;
import java.awt.Color;
import java.text.DecimalFormat;
import java.util.Map;
import java.util.TreeMap;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartMouseListener;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.entity.CategoryItemEntity;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author vbonnici
 */
public class LabeledMultiplicitiesFrame extends javax.swing.JFrame {
     
    
    
    
    
    private DecimalFormat df = new DecimalFormat("###,###,###,###");
    private WSSequence wsseq;
    private NELSA nelsa;
    private ChartPanel chartPanel = null;
    final private String xName = "k-mers";
    final private String yName = "Multiplicity";

    /**
     * Creates new form ProperCoDistancesFrame
     */
    public LabeledMultiplicitiesFrame(WSSequence wsseq) {
        this.wsseq = wsseq;
        this.nelsa = wsseq.getNELSA();
        
        initComponents();
        this.setTitle("Multiplicities: " + wsseq.getName());
       
        center_panel.setLayout(new BorderLayout());
        this.pickedPairLabel.setText("");
    
    }
    
    
    public LabeledMultiplicitiesFrame(WSSequence wsseq, int k) {
        this(wsseq);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        drawButton = new javax.swing.JButton();
        pickedPairLabel = new javax.swing.JLabel();
        decreaseButton = new javax.swing.JButton();
        increaseButton = new javax.swing.JButton();
        logyButton = new javax.swing.JToggleButton();
        kCombobox = new javax.swing.JComboBox();
        frequencyCheckBox = new javax.swing.JCheckBox();
        center_panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 350));

        drawButton.setText("draw");
        drawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawButtonActionPerformed(evt);
            }
        });

        pickedPairLabel.setText("jLabel1");

        decreaseButton.setText("-");
        decreaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseButtonActionPerformed(evt);
            }
        });

        increaseButton.setText("+");
        increaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                increaseButtonActionPerformed(evt);
            }
        });

        logyButton.setText("log Y");
        logyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logyButtonActionPerformed(evt);
            }
        });

        kCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        kCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kComboboxActionPerformed(evt);
            }
        });

        frequencyCheckBox.setText("frequency");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(kCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(decreaseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(increaseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawButton)
                .addGap(18, 18, 18)
                .addComponent(logyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(frequencyCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 202, Short.MAX_VALUE)
                .addComponent(pickedPairLabel)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drawButton)
                    .addComponent(pickedPairLabel)
                    .addComponent(decreaseButton)
                    .addComponent(increaseButton)
                    .addComponent(logyButton)
                    .addComponent(kCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(frequencyCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        center_panel.setBackground(new java.awt.Color(254, 254, 254));
        center_panel.setPreferredSize(new java.awt.Dimension(600, 300));

        javax.swing.GroupLayout center_panelLayout = new javax.swing.GroupLayout(center_panel);
        center_panel.setLayout(center_panelLayout);
        center_panelLayout.setHorizontalGroup(
            center_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        center_panelLayout.setVerticalGroup(
            center_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 297, Short.MAX_VALUE)
        );

        getContentPane().add(center_panel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void drawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawButtonActionPerformed
        makeChart();
    }//GEN-LAST:event_drawButtonActionPerformed

    private void decreaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseButtonActionPerformed
        try{
              
            if(kCombobox.getSelectedIndex() > 0)
                kCombobox.setSelectedIndex(kCombobox.getSelectedIndex() - 1);
            makeChart();
            
        }catch(Exception e){  
        }
    }//GEN-LAST:event_decreaseButtonActionPerformed

    private void increaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_increaseButtonActionPerformed
        try{
            if(kCombobox.getSelectedIndex() < kCombobox.getItemCount()-1)
                kCombobox.setSelectedIndex(kCombobox.getSelectedIndex() + 1);
            makeChart();
            
        }catch(Exception e){  
        }
    }//GEN-LAST:event_increaseButtonActionPerformed

    
    private void checkLogXScale(){
//        if(this.chartPanel != null){
//            if(this.logxButton.isSelected()){
//                ((XYPlot)(this.chartPanel.getChart().getPlot())).setDomainAxis(new LogAxis(xName));
//            }
//            else{
//               ((XYPlot)(this.chartPanel.getChart().getPlot())).setDomainAxis(new NumberAxis(xName));  
//            }
//        }
    }
    private void checkLogYScale(){
        if(this.chartPanel != null){
            if(this.logyButton.isSelected()){
                ((CategoryPlot)(this.chartPanel.getChart().getPlot())).setRangeAxis(new LogAxis(yName));
            }
            else{
               ((CategoryPlot)(this.chartPanel.getChart().getPlot())).setRangeAxis(new NumberAxis(yName));  
            }
        }
    }
    private void logyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logyButtonActionPerformed
        checkLogYScale();
    }//GEN-LAST:event_logyButtonActionPerformed

    private void kComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kComboboxActionPerformed

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel center_panel;
    private javax.swing.JButton decreaseButton;
    private javax.swing.JButton drawButton;
    private javax.swing.JCheckBox frequencyCheckBox;
    private javax.swing.JButton increaseButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox kCombobox;
    private javax.swing.JToggleButton logyButton;
    private javax.swing.JLabel pickedPairLabel;
    // End of variables declaration//GEN-END:variables

    
    
    
    
    public void makeChart(){
        if(this.nelsa != null){
            pickedPairLabel.setText("");
            
            this.chartPanel = null;
            
            this.setEnabled(false);
            
            center_panel.removeAll();
            center_panel.setBackground(Color.RED);
            center_panel.invalidate();
            center_panel.repaint();
            
           try{
        
               
                final int k = Integer.parseInt(kCombobox.getSelectedItem().toString());
                
                final Map<String,Integer> kmerlist = new TreeMap<>();
                
                final CompleteUnitIterator cit = new CompleteUnitIterator(k);
                IELSAIterator it;
                String skmer;
                
                double total_sum = 0;
                int multiplicity;
                
                do{
//                    System.out.println(B3Nucleotide.toString(cit.kmer()));
                    skmer = B3Nucleotide.toString(cit.kmer());
                    it = nelsa.find(new B3LLSequence(skmer));
                    if(it!=null){
                        multiplicity = it.multiplicity();
                        kmerlist.put(skmer, multiplicity);
                        total_sum += multiplicity;
                    }
                    else{
                        kmerlist.put(skmer, 0);
                    }
                    
                }while(cit.next());
                

                DefaultCategoryDataset dataset = new DefaultCategoryDataset();

                if(this.frequencyCheckBox.isSelected()){
                    for(Map.Entry<String, Integer> entry : kmerlist.entrySet()){
                        dataset.addValue(((double)entry.getValue()) / total_sum,"series1", entry.getKey());
                    }
                }
                else{
                    for(Map.Entry<String, Integer> entry : kmerlist.entrySet()){
    //                    System.out.println(entry.getKey() +"\t"+ (entry.getValue() / factor));
                        dataset.addValue(entry.getValue(),"series1", entry.getKey());
                    }
                }


//        //        System.out.println("["+it.istart()+","+it.iend()+"]");
//                final XYSeriesCollection dataset = new XYSeriesCollection(series);
//
//
//                final JFreeChart chart = ChartFactory.createXYBarChart(
//                                                null, 
//                                                xName, 
//                                                false, 
//                                                yName, 
//                                                dataset, 
//                                                PlotOrientation.VERTICAL, 
//                                                false, 
//                                                true, 
//                                                false);
//
                final JFreeChart chart = ChartFactory.createBarChart(
                        null,         // chart title
                        xName,               // domain axis label
                        yName,                  // range axis label
                        dataset,                  // data
                        PlotOrientation.VERTICAL, // orientation
                        false,                     // include legend
                        true,                     // tooltips?
                        false                     // URLs?
                    );
                final ChartPanel chartPanel = new ChartPanel(chart);
                chartPanel.setPreferredSize(center_panel.getPreferredSize());
                chart.setBackgroundPaint(Color.white);
//                //chartPanel.setMouseZoomable(false);
                chartPanel.setMouseWheelEnabled(true);

                chartPanel.setMinimumDrawWidth( 0 );
                chartPanel.setMinimumDrawHeight( 0 );
                chartPanel.setMaximumDrawWidth( 1920 );
                chartPanel.setMaximumDrawHeight( 1200 );
                
                final CategoryPlot plot = chart.getCategoryPlot();
                plot.setBackgroundPaint(Color.white);
                ((BarRenderer)plot.getRenderer()).setBarPainter(new StandardBarPainter());

                // set the range axis to display integers only...
                final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
//                rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

                // disable bar outlines...
                final BarRenderer renderer = (BarRenderer) plot.getRenderer();
//                renderer.setDrawBarOutline(false);

                
                
//                XYPlot plot = (XYPlot) chart.getPlot();
//                plot.setBackgroundPaint(Color.WHITE);
//                ((XYBarRenderer) plot.getRenderer()).setBarPainter(new StandardXYBarPainter());
//                plot.getRenderer().setSeriesPaint( 0, Color.BLUE);
//                
//                ((XYBarRenderer) plot.getRenderer()).setMargin(0.1);
                
                
//                plot.setDomainPannable(true);
                plot.setRangePannable(true);
                
                //plot.setDomainGridlinesVisible(true);  
                plot.setRangeGridlinesVisible(true);  
                plot.setRangeGridlinePaint(Color.gray);  
                //plot.setDomainGridlinePaint(Color.gray);
                


                chartPanel.addChartMouseListener(new ChartMouseListener() {

                    @Override
                    public void chartMouseClicked(ChartMouseEvent cme) {

                       System.out.println(cme.getEntity().getClass());
                            if (cme.getEntity() instanceof CategoryItemEntity) {
                                
                                pickedPairLabel.setText("" + 
                                        ((CategoryItemEntity)cme.getEntity()).getColumnKey()
                                        + ": " +
                                        df.format(((CategoryItemEntity)cme.getEntity()).getDataset().getValue(
                                            ((CategoryItemEntity)cme.getEntity()).getRowKey(),
                                            ((CategoryItemEntity)cme.getEntity()).getColumnKey()))
                                        );
                                
//                                System.out.println(((CategoryItemEntity)cme.getEntity()).getColumnKey());
//                                System.out.println(((CategoryItemEntity)cme.getEntity()).getRowKey());
//                                
//                                System.out.println(((CategoryItemEntity)cme.getEntity()).getDataset().getValue(
//                                         ((CategoryItemEntity)cme.getEntity()).getRowKey(),
//                                        ((CategoryItemEntity)cme.getEntity()).getColumnKey())
//                                       );
                                
                            return;
                            }
                          
                          
//                        Plot p = cme.getChart().getPlot();
//                        if(p instanceof XYPlot){                    
//                            if(cme.getEntity() instanceof XYItemEntity){                        
//                                int seriesIndex = ((XYItemEntity)cme.getEntity()).getSeriesIndex();
//                                int item = ((XYItemEntity)cme.getEntity()).getItem();
//                                XYSeries series = ((XYSeriesCollection)dataset).getSeries(seriesIndex);
//                                XYDataItem xyItem = series.getDataItem(item);
////                                System.out.println(xyItem);
//                                
//                                pickedPairLabel.setText("("+df.format(xyItem.getX().intValue())+" ; "+df.format(xyItem.getY().intValue())+")");
//                                
//                                return;
//                            }
//                        }
//                        
                        pickedPairLabel.setText("");
                    }

                    @Override
                    public void chartMouseMoved(ChartMouseEvent cme) {
                    }

                });
        
                this.chartPanel = chartPanel;
                
//                checkLogXScale();
                checkLogYScale();
        
                center_panel.add(chartPanel, BorderLayout.CENTER);
                center_panel.revalidate();
                center_panel.repaint();
        
           }catch(Exception e){
               e.printStackTrace();
           }
           
           
           this.setEnabled(true);
        }
    }
    
    
    
    
    
    public static void main(String[] args){
//        for(int k=13; k<14; k++){
//            System.out.println("k = "+k);
//            
//            int code = 0x0;
//            B2UnitRLKmer kmer = new B2UnitRLKmer(code);
//            System.out.println(kmer + "\t" + B2Nucleotide.toString(kmer.nucleotides(k)));
//            
//            for(double i=1; i<Math.pow(4, k); i++){
//               code++;
//               kmer.setCode(code);
//               System.out.println(kmer + "\t" + B2Nucleotide.toString(kmer.nucleotides(k)));
//            }
//            
//        }
        
        CompleteUnitIterator it = new CompleteUnitIterator(4);
        System.out.println(B3Nucleotide.toString(it.kmer()));
        while(it.hasNext()){
            it.next();
            System.out.println(B3Nucleotide.toString(it.kmer()));
        }
    }
    
}
