/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package igtools.gui2.words;

import igtools.analyses.toRemove.Distribution;
import igtools.analyses.toRemove.ExtractByDistrComp;
//import igtools.common.seqdb.FASTASeqsListIterator;
//import igtools.common.seqdb.ISeqsListIterator;
import igtools.common.sequence.B3LLSequence;
import igtools.common.sequence.B3Sequence;
import igtools.dictionaries.elsa.IELSAIterator;
import igtools.dictionaries.elsa.NELSA;
import igtools.gui2.WSSequence;
import igtools.gui2.positions.CoveragePanel;
import igtools.gui2.positions.NCoverageGraphPanel;
import igtools.gui2.positions.PositionsPanel;

import java.awt.Color;
import java.awt.Dimension;
import java.text.DecimalFormat;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.Scrollable;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.StandardXYBarPainter;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author vbonnici
 */
public class FileWordProperties extends javax.swing.JFrame {

    
    private final DecimalFormat df = new DecimalFormat("###,###,###,###");
    
    private WSSequence wsseq;
    private NELSA nelsa;
    private B3Sequence b3seq;
    
    //private FASTASeqsListIterator seqsIt = null;
    private IELSAIterator nelsaIt = null;
    
    ExtractByDistrComp distrExtractor = null;
    
    
    /**
     * Creates new form FileWordProperties
     */
    public FileWordProperties(WSSequence wsseq) {
        this.wsseq = wsseq;
        this.nelsa = wsseq.getNELSA();
        this.b3seq = wsseq.getB3seq();
        
        distrExtractor = new ExtractByDistrComp(this.wsseq.getB3seq(), this.nelsa);
        
        initComponents();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        loadSequencesFileButton = new javax.swing.JButton();
        sequencesFileLabel = new javax.swing.JLabel();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        sequenceTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        multiplicityLabel = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        maxDistTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        logYToggleButton = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        centerPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(900, 110));

        loadSequencesFileButton.setText("Load sequences");
        loadSequencesFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadSequencesFileButtonActionPerformed(evt);
            }
        });

        sequencesFileLabel.setText("no file");

        prevButton.setText("Prev");
        prevButton.setEnabled(false);
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.setEnabled(false);
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Multiplicity");

        multiplicityLabel.setText("0");

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("max dist.");

        logYToggleButton.setText("log Y");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(loadSequencesFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sequencesFileLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(prevButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nextButton))
                            .addComponent(refreshButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(multiplicityLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 513, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(4, 4, 4)
                                .addComponent(maxDistTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(logYToggleButton))
                            .addComponent(sequenceTextField))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(maxDistTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(logYToggleButton)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loadSequencesFileButton)
                            .addComponent(sequencesFileLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(prevButton)
                            .addComponent(nextButton)
                            .addComponent(sequenceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(multiplicityLabel))
                            .addComponent(refreshButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 500));

        centerPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("white"));
        centerPanel.setLayout(new javax.swing.BoxLayout(centerPanel, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane1.setViewportView(centerPanel);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void checkButtons(){
       /* if(seqsIt != null){
            if(!seqsIt.hasPrev())
                this.prevButton.setEnabled(false);
            else
                this.prevButton.setEnabled(true);
            if(!seqsIt.hasNext())
                this.nextButton.setEnabled(false);
            else
                this.nextButton.setEnabled(true);
        }
        else{
            this.prevButton.setEnabled(false);
            this.nextButton.setEnabled(false);
            this.sequenceTextField.setText("");
        }*/
    }
    
    private void loadSequencesFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadSequencesFileButtonActionPerformed
        /*JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(false);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            //seq.setFASTAFile(chooser.getSelectedFile().getAbsolutePath());
            String file = chooser.getSelectedFile().getAbsolutePath();
            this.sequencesFileLabel.setText(file);
            try{
                
                seqsIt = new FASTASeqsListIterator(file, false);
                next();
                
            }catch(Exception e){
                e.printStackTrace();
                System.out.println(e);
            }
        }*/
    }//GEN-LAST:event_loadSequencesFileButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        /*if(this.seqsIt.hasPrev() && this.seqsIt.prev()){
            this.seekSequence();
            this.checkButtons();
        }*/
    }//GEN-LAST:event_prevButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        next();
    }//GEN-LAST:event_nextButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
       /* if(this.seqsIt != null){
            this.seekSequence();
            this.checkButtons();
        }*/
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void next(){
        /*if(this.seqsIt.hasNext() && this.seqsIt.next()){
            this.seekSequence();
            this.checkButtons();
        }*/
    }
    
    private void seekSequence(){
        /*if(this.seqsIt != null){
            String word = seqsIt.seq();
            this.sequenceTextField.setText(seqsIt.seq());
            this.nelsaIt = nelsa.find(new B3LLSequence(word));
            if(this.nelsaIt != null){
                this.multiplicityLabel.setText(df.format(this.nelsaIt.multiplicity()));
                makeCharts(this.nelsaIt);
            }
            else{
                this.multiplicityLabel.setText("not found");
            }
        }*/
    }
    
    
    private void clearChartsPanel(){
        this.centerPanel.removeAll();
        //this.chartsPanel.setBackground(Color.RED);
        this.centerPanel.invalidate();
        this.centerPanel.repaint();
    }
    
    private void forceChartsPanel(){
        this.centerPanel.revalidate();
        this.centerPanel.repaint();
    }
    
    
    private void makeCharts(IELSAIterator it){
        clearChartsPanel();
        
        Double maxDist = Double.POSITIVE_INFINITY;
        try{
            if(this.maxDistTextField.getText().trim().length() == 0)
                maxDist = Double.POSITIVE_INFINITY;
            else
                maxDist = Double.parseDouble(this.maxDistTextField.getText());

        }catch(Exception e){
            maxDist = Double.POSITIVE_INFINITY;
        };
            
        
        ChartPanel rawWordDistr = makeDistrPanel(it, maxDist);
        this.centerPanel.add(rawWordDistr);
        
        
        ChartPanel estDistr = makeEstGeomDistrPanel(it, maxDist);
        this.centerPanel.add(estDistr);
        
        
        //ChartPanel normKDistr = makeKDistrChart(it, maxDist, false, false);
        //this.centerPanel.add(normKDistr);
        
        JPanel posistionsPanel = new PositionsPanel(this.wsseq, it.positions());
        this.centerPanel.add(posistionsPanel);
        
        NCoverageGraphPanel ncovPanel = new NCoverageGraphPanel(this.wsseq);
        ncovPanel.setStyleProperties(10, 0, 50, centerPanel);
        this.centerPanel.add(ncovPanel);
        
        /*JPanel coveragePanel = new CoveragePanel(this.wsseq, it.positions(), it.k());
        this.centerPanel.add(coveragePanel);*/
        
        
        if(this.logYToggleButton.isSelected()){
            ((XYPlot)(rawWordDistr.getChart().getPlot())).setDomainAxis(new LogAxis("Frequency"));
            //((XYPlot)(normKDistr.getChart().getPlot())).setRangeAxis(new LogAxis("Frequency"));
        }
        
        forceChartsPanel();
    }
    
    
    
    private ChartPanel makeDistrPanel(IELSAIterator it, double maxDist){
        try{
            int[] dists = igtools.analyses.toRemove.DistalRecurrence.proper_codistances(it);
            final XYSeries series = new XYSeries("");
            if(dists != null){
                if(dists.length > 0){
                    int[][] codists = igtools.analyses.toRemove.DistalRecurrence.co_recurrences_array(dists, false);
                    for(int i=0; i<codists[0].length; i++){
                        if(codists[0][i] > maxDist)
                            break;
                        series.add(codists[0][i], codists[1][i]);
                    }
                }
            }
            ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            //chart.getChart().setTitle("Raw word distribution");
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    
    private ChartPanel makeKDistrChart(IELSAIterator it, Double maxDist, boolean normalizeByK, boolean normalizeByMax){
        try{
            Distribution distr =  distrExtractor.getCachedByLengthDistr(this.nelsa, it.k(), normalizeByMax);
            TreeMap<Double,Double> distrValues = distr.distribution;
            final XYSeries series = new XYSeries("");
            for(Map.Entry<Double,Double> entry : distrValues.entrySet()){
                if(entry.getKey() > maxDist)
                    break;
                series.add(entry.getKey(), entry.getValue());
            }
            ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            chart.getChart().setTitle("|k| distribution");
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    
    /*
    private ChartPanel makePositionsPanel(IELSAIterator it){
       try{
            int[] dists = igtools.analyses.DistalRecurrence.proper_codistances(it);
            final XYSeries series = new XYSeries("");
            if(dists != null){
                if(dists.length > 0){
                    int[][] codists = igtools.analyses.DistalRecurrence.co_recurrences_array(dists, false);
                    for(int i=0; i<codists[0].length; i++){
                        series.add(codists[0][i], codists[1][i]);
                    }
                }
            }
            ChartPanel chart =  makeRawChart(series, "Position", "Bin frequency");
            //chart.getChart().setTitle("Raw word distribution");
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null; 
    }
    */
    
    
    private ChartPanel makeEstGeomDistrPanel(IELSAIterator it, double maxDist){
        try{
            final XYSeries series = new XYSeries("");
            
            int[] dists = igtools.analyses.toRemove.DistalRecurrence.proper_codistances(it);
            double ep = 0.0;
            if(dists != null){
                if(dists.length > 0){
                    double n = 0.0;
                    int[][] codists = igtools.analyses.toRemove.DistalRecurrence.co_recurrences_array(dists, false);
                    for(int i=0; i<codists[0].length; i++){
                        ep += (double)codists[0][i] * (double)codists[1][i];
                        n += (double)codists[1][i];
                    }
                    
                    ep /= n;
                    System.out.println("ep "+ep);
                    
                    for(int i=0; i<codists[0].length; i++){
                        if(codists[0][i] > maxDist)
                            break;
                        series.add((double)codists[0][i], Math.pow(1-ep, (double)codists[0][i]) * ep);
                    }
                }
            }
            ChartPanel chart =  makeRawChart(series, "Distance", "Frequency");
            //chart.getChart().setTitle("Raw word distribution");
            return chart;
        }catch(Exception e){
            e.printStackTrace();
            System.out.println(e);
        }
        return null;
    }
    
    private ChartPanel makeRawChart(final XYSeries series, final String xLabel, final String yLabel){
            //, final int xSize, final int ySize){
        final XYSeriesCollection dataset = new XYSeriesCollection(series);
        
        final JFreeChart chart = ChartFactory.createXYBarChart(
                                        null, 
                                        xLabel, 
                                        false, 
                                        yLabel, 
                                        dataset, 
                                        PlotOrientation.VERTICAL, 
                                        false, 
                                        true, 
                                        false);
        
        
        /*JFreeChart chart = ChartFactory.createXYStepChart 
                                                ( 
                                                null, 
                                                xLabel, 
                                                yLabel, 
                                                dataset, 
                                                PlotOrientation.VERTICAL, 
                                                true, // legend 
                                                true, // tooltips 
                                                false // urls 
                                                ); 
        */
        
        final ChartPanel chartPanel = new ChartPanel(chart){
            @Override
            public Dimension getPreferredSize() {
                return new Dimension(centerPanel.getWidth(),  300);
            }
        };
        
        chartPanel.setMinimumDrawWidth( 0 );
        chartPanel.setMinimumDrawHeight( 300 );
        chartPanel.setMaximumDrawWidth( 1920 );
        chartPanel.setMaximumDrawHeight( 1200 );
        
        //chartPanel.setPreferredSize(center_panel.getPreferredSize());
        chart.setBackgroundPaint(Color.white);
        //chartPanel.setMouseZoomable(false);
        chartPanel.setMouseWheelEnabled(true);
        
        
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setBackgroundPaint(Color.WHITE);
        ((XYBarRenderer) plot.getRenderer()).setBarPainter(new StandardXYBarPainter());
        plot.getRenderer().setSeriesPaint( 0, Color.BLUE);
        plot.setDomainPannable(true);
        plot.setRangePannable(true);
        
        plot.getDomainAxis().setAutoTickUnitSelection(true);
        //((NumberAxis)plot.getDomainAxis()).setTickUnit(new NumberTickUnit(0.1));
        //plot.getDomainAxis().setStandardTickUnits(NumberAxis.createStandardTickUnits());
        
        
        /*
        chart.setBackgroundPaint(Color.WHITE);
        chart.getPlot().setBackgroundPaint(Color.WHITE);
        final XYPlot plot = chart.getXYPlot(); 
        plot.getRenderer().setSeriesPaint(0, Color.BLUE);
        //plot.getDomainAxis().setStandardTickUnits(NumberAxis.createStandardTickUnits());
        //plot.getRenderer().setBarPainter(new StandardXYBarPainter());
        */
        
        return chartPanel;
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadSequencesFileButton;
    private javax.swing.JToggleButton logYToggleButton;
    private javax.swing.JTextField maxDistTextField;
    private javax.swing.JLabel multiplicityLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton prevButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextField sequenceTextField;
    private javax.swing.JLabel sequencesFileLabel;
    // End of variables declaration//GEN-END:variables
}
